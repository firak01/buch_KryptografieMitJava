\end{center}\newpage\pagenumbering{Roman}  Herbert Voß, Berlin, März 2000voss@perce.de\tableofcontents{}\newpage \pagenumbering{arabic}1 Allgemein1.1 Lernziele Lernziele werden hier nur formal angegeben, eine Operationalisierungerfolgt nicht.+------------------+-------------------------------------------------------------------+| Der Schüler kann | die Geschichte der Krytologie an Beispielen beschreiben           |+------------------+-------------------------------------------------------------------+| ...              | die politische Bedeutung am Beispiel der Enigma diskutieren       |+------------------+-------------------------------------------------------------------+| ...              | verschiedene Verfahren der Kryptologie benennen                   |+------------------+-------------------------------------------------------------------+| ...              | symmetrische und asymmetrische Verfahren unterscheiden            |+------------------+-------------------------------------------------------------------+| ...              | kann den Begriff ``sicher'' relativieren                          |+------------------+-------------------------------------------------------------------+| ...              | kann entsprechende Algorithmen zu einzelnen Verfahren beschreiben |+------------------+-------------------------------------------------------------------+| ...              | kann Einflüsse auf einen Nachrichtenkanal beschreiben             |+------------------+-------------------------------------------------------------------+1.2 Didaktische VorbemerkungenKryptologie\index{Kryptologie}, ein Thema so alt wie die Menschheit(Abb.\ref{hyroglyphen}) und doch gibt es diesen Terminus erst seitein paar Jahrzehnten.\cite{diffie:1979}([fig] \resizebox*{7cm}{!}{\includegraphics{classical3.eps}} \label{hyroglyphen}Hyroglyphen\index{Hyroglyphen}der Ägypter als Beispiel für einen kodierten Text)  Meyers Hand-Lexikonaus dem Jahre 1883 \cite{meyer:1883}kennt nur den Begriff Kryptographie\index{Kryptographie}und verweist auf den Eintrag Chiffre\index{Chiffre}, unter dem manfolgendes findet:Zahlzeichen, Ziffer; C.schrift, Geheimschrift, seit Richelieu\index{Richelieu}im diplomatischen Verkehr angewandt, wird gelesen mittels der Dechiffrierkunst\index{Dechiffrierkunst}mit und ohne dazugehörigen Schlüssel, im letzteren Fall schwierig;Chiffrierbüreaus\index{Chiffrierbüreaus}, die dazu bestimmte Behördemit den nötigen Dechiffreuren\index{Dechiffreuren}. \cite[Bd. 1, S. 398]{meyer:1883}Der Terminus Cryptography geht wohl auf John Wilkins, dem Gründer derenglischen Royal Society zurück. In Meyers Enzyklopädischem Lexikonvon 1973 findet sich ein längerer Beitrag zum Thema ``Geheimschrift\index{Geheimschrift}'',wobei auf Caesar\index{Caesar}, die Trittenheimischen\index{Trittenheim}Multiplikationstabellen\index{Multiplikationstabellen}, Ziffernkabinette\index{Ziffernkabinett}([footnote] Bezeichnungfür geheime Behörden, die zuerst in Frankreich unter Ludwig XIV.,unter Kaiser Karl VI. auch in Österreich eingeführt wurden und derenAufgabe im Eröffnen, Kopieren und Dechiffrieren der abgefangenen Postvor allem auswärtiger Mächte bestand. \cite[Band 25, S. 712]{meyer:1973}) und das Verwürfelungsverfahren\index{Verwürfelungsverfahren} verwiesenwird.\cite[Band 9, Seite 812]{meyer:1973} In einem gängigen Lexikonder Informatik von 1986 finden sich dann schon 13 Beiträge, angefangenbeim Schlagwort Kryptoalgorithmus\index{Kryptoalgorithmus} bis hinzum Kryptosystem\index{Kryptosystem}. \cite[S. 330f]{schneider:1986}Stellt man heute eine Suchanfrage zum Thema Cryptography\index{Cryptography}im Internet, so kann man sich vor Verweisen kaum retten. Auch hiergab es sowohl inhaltlich als auch von der Veröffentlichungsflut hereine exponentielle Entwicklung parallel zum Internet und den damitverbundenen Schlagwörtern wie eCommerce\index{eCommerce} und Homebanking\index{Homebanking}. Erst in neurer Zeit ist durch das exponentielle Wachsen des eMail-Verkehrsund des Online-Bankings eine private Nutzung kryptografischer Verfahrenin den Vordergrund gerückt. Innerhalb der militärischen Nutzung wirdimmer von den ``good guys'', den Kryptografen\index{Kryptografen}und den ``bad guys'', den Kryptoanalysten\index{Kryptoanalysten},gesprochen. Dies entspricht natürlich einer gängigen ``einäugigen''Sichtweise bzw. einem einfachen Schwarz-Weiß-Denkmuster, ist aberletztlich ``the game'' \cite{sedgewick:89}. Grundsätzlich geht esseit Jahrtausenden immer um das gleiche Prinzip: eine Nachricht sollihren geschützten Ort wechseln und unterliegt ausserhalb dieses Ortesgewissen Gefahren (Abb.\ref{kryp1}).([fig] \psline[linewidth=2pt]{->}(2,0.5)(5,0.5)\rput(1,0.5){\bf{Sender}}\rput(6.125,0.5){\bf{Empfänger}}\rput(3.5,0.75){\bf{Unsicherer}}\rput(3.5,0.25){\bf{Weg}}\label{kryp1}Grundprinzipeiner Nachrichtenübertragung) Auf den ``unsicheren Nachrichtenkanal'' haben zwei Dinge großen Einfluß,die jeweils einen partiellen oder totalen Informationsausfall zurFolge haben können: * technische Störungen (passive Eingriffe\index{passive Eingriffe})* Manipulation (aktive\index{aktive Eingriffe} Eingriffe)Der erste Fall kann vielfältige, manchmal nicht näher zu bezeichnendeGründe haben([footnote] auch ironisch als ``God's influence'' bezeichnet.) ,man denke nur an ein normales Telefongespräch mit den häufigen Nebengeräuschen,die teilweise auch zu einer totalen Überlagerung zweier Gesprächeführen können. Daher werden verschiedene Verfahren der Kodierung angewendet,die sicherstellen sollen, dass bei partiellem Verlust an Informationdieser wieder rückgängig gemacht werden kann. Dazu wird im allgemeinendie Redundanz\index{Redundanz} des Systems erhöht. Ein einfaches Beispielwäre der Transport einer Personengruppe von einer Insel zur anderen:sieht man dafür zwei Fähren vor, obwohl von der zu überführenden Personenzahleine ausreichen würde, so kann bei Ausfall einer Fähre sofort dieandere den Dienst übernehmen. In diesem Beispiel wäre die Redundanzbei 100%, denn eine Fähre würde ausreichen.Im zweiten Fall wird durch aktive Eingriffe versucht, den Informationsflusszu behindern oder in negativer Absicht zu kontrollieren, was man durchkryptografische Maßnahmen zu verhindern sucht.([fig] linewidth=0.25cm1.2531.252.25002.5110Feindliche10Aktion1.106ryptologieund0.15Authentifikationlinewidth=0.25cm1.2511.251.75\label{krypt2}Beeinflussungdes Nachrichtenkanals) Das sichere Verfahren wird es für beide Fälle nicht geben, denn gegenmassive Störungen im Funkverkehr bis hin zu Totalausfällen, kann aucheine Erhöhung der Redundanz manchmal nicht helfen. Ein Beispiel sindhier Flugzeuge, die in der Regel bei fast allen technischen Systemenüber eine doppelte, teilweise dreifache Ausstattung([footnote] DenHöhenmesser gibt es in vielen Flugzeugen in drei von einander unabhängigarbeitenden Ausführungen, was einer großen Redundanz entspricht.)  verfügenund dennoch abstürzen können und es auch machen. Im Bereich der kryptografischenVerfahren geht man zur Zeit zwar davon aus, dass der Zeitraum zwischendem böswilligen Abfangen einer verschlüsselten Nachricht und ihrerEntschlüsselung so groß ist, dass der Inhalt der Nachricht sich vonselbst erledigt hat. Dabei ist aber immer noch der sogenannte ``Sechserim Lotto'' möglich, d.h. jemand gibt willkürlich einen Gegenschlüsselvor, der exakt der richtige ist.Grundsätzlich spielen heutzutage die Methoden der verdeckten Geheimschriften,der sogenannten Steganographie, keine bedeutende Rolle mehr. Deshalbhat auch die Unterscheidung "offene - verdeckte Geheimschriften" faktischkeine Bedeutung mehr. Dies betrifft jedoch nur die Anwendung, denndie Kryptologie ist per Definition eine dynamische Wissenschaft, sodass immer wieder nach neuen Wegen gesucht werden muss, denn jederbekannter Weg ist kein Weg mehr. Und so kommen auch wieder Verfahrender Steganographie in neue Überlegungen hinein.([footnote] Siehe auchftp://ripem.msu.edu/pub/crypt/docs/Steganography.software.list) \cite[S.303]{wobst:00}Weitere Literaturangaben zur Geschichte der Kryptologie findet manbei \protect\url{ftp://ripem.msu.edu/pub/crypt/docs/crypto-history-books.txt}.2 Der Transpositionsalgorithmus\index{Transpositionsalgorithmus} (Skytale\index{Skytale}  von Sparta\index{Sparta})Bereits vor mehr als 2500 Jahren soll in Sparta die sogenannte Skytaleverwendet worden sein. Das Prinzip ist sehr einfach und kann ganzleicht nachvollzogen werden. Man denke sich einfach eine leere Küchen-oder Toilettenrolle und wickele spiralförmig einen ([fig] \resizebox*{0.4\columnwidth}{!}{\includegraphics{skytale.eps}} DasPrinzip der Skytale von Sparta) längeren Papierstreifen darum (Abb.\ref{Skytale}).Jetzt wird die Nachricht horizontal oder vertikal([footnote] natürlichnicht längs des Papierstreifens ... ;-))  auf das Papier geschrieben,wobei zwingend mehr als eine Zeile geschrieben werden muss (Abb.\ref{Skytale2}),denn sonst ist die Reihenfolge der Buchstaben auf dem Papierstreifenidentisch zum Text. Danach wird das Band einfach wieder abgewickeltund dem Empfänger übersendet. Es ist einleuchtend, dass die Reihenfolgeder Buchstaben auf dem Textstreifen keinen sinnvollen Text ergibt:([fig] \resizebox*{0.5\columnwidth}{!}{\includegraphics{plaengs.eps}} \label{Skytale2}Beschriftungdes Papierstreifens) H  F  D  I  I  A  N  N  S  D  D  G  E  E  O  R  T  L  H  S  D  O  I  B  E  C  EDas Dekodieren dieser Zeichenfolge ist jetzt ohne Zeitverlust nur miteiner Rolle desselben Durchmessers möglich! Grundsätzlich lässt sichder Text einfach dechiffrieren, denn der Originaltext war in einerMatrix mit m Zeilen und n Spalten angeordnet, aus denen nach dem Chiffriereneine einzeilige Matrix wurde. Wie bereits erwähnt wurde, müssen mindestenszwei Zeilen geschrieben werden, um überhaupt eine Verschlüsselungzu erreichen. Im angegebenen Beispiel enthält der Text insgesamt 27Buchstaben, d.h. der Originaltext kann nur in einer Matrix angeordnetgewesen sein, für deren Zeilenzahl gilt: Zeilen\in \{2\, \ldots \, (AnzahlBuchstaben-1)\}Darausfolgt dann zwingend für die Zahl der möglichen Spalten Spalten=\frac{AnzahlBuchstaben}{Zeilen}Die Zeichen werden dann beginnend mit einer 2-zeiligen und 14-spaltigenMatrix bis zu einer 14-zeiligen und 2-spaltigen Matrix solange angeordnetbis sich ein sinnvoller Text ergibt. Da dies nur eine Frage der Zeitist, kann der Algorithmus nicht als besonders sicher bezeichnet werden.Mit Alg. erhält man so auch schon nach dem zweiten Durchlauf die Lösungder in Abb.\ref{Skytale2} dargestellten Chiffre. Zu beachten ist dabei,dass je nach Wickelrichtung des Bandes die Zeilen von oben nach untenoder von unten nach oben angeordnet sind. Da die Skytale aus Abb.\ref{Skytale2}von links nach rechts gelsen wurde, ist die Zeilenanordnung von untennach oben, was auch durch die folgende Bildschirmausgabe des Programmsbestätigt wird.3 Monoalphabetische VerschlüsselungHierbei handelt es sich um sogenannte Substitutionsalgorithmen\index{Substitutionsalgorithmus},die nur noch einen historischen Wert haben. Bei dieser vielfach aufCaesar([footnote] Julius Gaius Caesar (100-44 v.C.)) \index{Caesar}zurückgeführten Verschlüsselungsmethode wird das originale Alphabeteinfach horizontal verschoben, weshalb man auch von einer (Verschiebechiffre\index{Verschiebechiffre})spricht.([footnote] Die Caesar-Methode soll eigentlich schon vor ihmbekannt gewesen sein. Es ist wegen der Bedeutungslosigkeit diesesVerfahrens sinnlos, diesen Punkt weiter zu klären. )  Bei einem Schlüsselvon s=3 wird z.B. der Buchstabe "A" um drei Buchstaben nach rechtsverschoben, wird also zu einem "D".([footnote] Läßt man eine zyklischeVertauschung zu, so kann auch entsprechend s=23 Stellen nach linksverschoben werden.)  Das gleiche passiert mit den anderen Buchstabenim Alphabet, denn mindestens für einen Text als Ganzes muss dieserSchlüssel gleich sein. Am Ende des Alphabets fängt es dann wiedervon vorne an. Aus einem Z wird dann ein C usw. Da dieses Verfahrenheute wegen seiner sehr leichten Dekodierbarkeit keine Anwendung mehrfindet, ist es auch müßig über eine Anwendung innerhalb des ASCIIzu diskutieren. Zur Vereinfachung des Vorganges der Chifferierenshatte bereits 1470 Alberti\index{Alberti}([footnote] Leon BattistaAlberti (1404-1472))  eine Maschine erfunden, die einfach aus zwei konzentrischenScheiben bestand, die gegeneinander verschoben werden(Abb.\ref{Alberti}).Das Verfahren hat also nur noch historischen Wert und eignet sichhöchstens als Einstieg in das Thema Kryptologie. 3.1 Beispiel zum KodierenAls Grundlage für einen einfachen Test sollen einfach sämtliche Zeichennach ASCII im Bereich dezimal 32-126 kodiert werden:([footnote] DieZeichen sind in drei Zeilen unterteilt: Sonderzeichen und Ziffern;Großbuchstaben und eckige Klammern; Kleinbuchstaben und geschweifteKlammern.) \LiesText{Test.original}Ausgehend von einem auf 8 Bit erweiterteten standardmäßigen ASCII wirddieser Text mithilfe des Alg. verschlüsselt, wobei bei einer reinenZeichenverschlüsselung([footnote] Bedeutet, dass die kodierte Textebenfalls als Zeichen dargestellt wird. Eine andere Möglichkeit wäredie Kodierung als eine Folge von Bytes darzustellen, womit alle Problemeder Zeichendarstellung auf dem Bildschirm entfallen.)  der Bereich aufASCII 32..126 sinnvollerweise eingeschränkt werden sollte, wenn maneine grafische Ausgabe vorsieht. In diesem ``reinen'' ASCII-Bereichgibt es keine nicht darstellbaren Sonderzeichen([footnote] z.B. denTabstop, Backspace usw.) , so dass es auch nicht zu Problemen bei derAusgabe kommen kann. Wie dem Algorithmus entnommen werden kann, wirddazu die Zeichenfolge auf den Startwert 32 (entspricht der Leertaste)bezogen, so dass es insgesamt 94 darstellbare Zeichen gibt, die durchmodulo 95 in Programmzeile 16 rotieren.([footnote] Normalerweise sprichtman auch von einer ``modulo 26-Verschlüsselung'', wenn nur die 26Groß-Buchstaben berücksichtigt werden.) Mit einer Verschiebung von schluessel=10 ergibt sich dann als kodierterText: \LiesText{Test.kodiert}Der Einfluss der modulo-Funktion ist an der dritten Zeile eindeutigsichtbar, denn die Zeile enthält als Ende den Anfang der ersten Zeiledes Originals.([fig] \begin{pspicture}(-3.5,-3)(3.5,3)%\newgray{mygray}{0.75}%\psset{fillstyle=solid,fillcolor=mygray}\psset{fillstyle=solid,fillcolor=lightgray}\SpecialCoor\degrees[2.6]\multido{\n=0.0+.1}{26}{\rput{\n}{\pswedge{3}{-0.05}{0.05}}}%\newgray{mygray}{1}\psset{fillstyle=solid,fillcolor=white}\multido{\n=0.0+.1}{26}{\rput{\n}{\pswedge{2.25}{-0.05}{0.05}}}%\newgray{mygray}{0.5}\psset{fillstyle=solid,fillcolor=lightgray}\pscircle{1.5}\psset{fillstyle=solid,fillcolor=black}\pscircle{0.15}\multido{\n=0+.1,\i=65+1}{26}{\rput{\n}{\hspace{5.25cm}\bf\char\i}}\multido{\n=-0.4+.1,\i=97+1}{26}{\rput{\n}{\hspace{3.7cm}\bf \char\i}}\end{pspicture}\end{center}\label{Alberti}Chiffriermaschine nach Alberti) 3.2 Beispiel zum Dekodieren\index{Dekodieren}Jede Sprache hat ihre eigene Häufigkeitsverteilung\index{Häufigkeitsverteilung}der Buchstaben. In Abhängigkeit des jeweiligen Textes gibt es innerhalbeiner Sprache noch weitere signifikante Häufigkeitsverteilungen. Sozeigt z.B. Abb.\ref{haufen} die Buchstabenverteilung eines Pascal-Programm-Quelltextes.Typisch ist das häufige Auftreten von ``E'' und ``T'', wobei letztererhauptsächlich durch die vielen ``if-then''-Abfragen zustande kommen.Ein derartiger Text stellt häufig eine Kombination aus zwei Sprachendar, denn die Syntax baut auf der englischen, die Variablen und Kommentarehäufig auf der deutschen Sprache auf.([fig] \resizebox*{12cm}{!}{\includegraphics{letter.eps}} \label{haufen}Häufigkeitsverteilungeines Klartextes (nicht verschlüsselt)) Zuerst ist also vom verschlüsselten Text eine derartige Häufigkeitsverteilungzu bestimmen, die nach dem häufigsten Auftreten der einzelnen Buchstabensortiert wird. In fast allen Sprachen kann davon ausgegangen werden,dass in unverschlüsselten Texten der Buchstabe ``e'' am häufigstenauftritt, so dass der im verschlüsselten Text am häufigsten auftretendeBuchstabe dem ``e'' gleichgesetzt wird. Unter der Annahme dass diesz.B. der Buchstabe ``k'' war, kann man sofort die Schlüssellänge ermitteln,die entweder s=6 bei Rechtsschieben oder s=20 bei Linksschieben beträgt. Ord(k)=107\quad Ord(e)=101\quad \Rightarrow s=107-101=6Die folgende Ausgabe des Alg. zeigt diese Arbeitsweise ausführlich: 1. der zu dekodierende Text wird zur Kontrolle noch einmal ausgegeben;2. die Häufigkeitsverteilung der Buchstaben wird bestimmt, wobei nur  der Bereich 32 (Leerschritt) bis 126 (~) ausgegeben wird;([footnote] Algorithmusberücksichtigt jedoch alle 256 möglichen Zeichen.) 3. Sortieren nach den 10 häufigsten Zeichen;4. ein vermutetes ``häufig'' auftretendes Bezugszeichen wird vorgegeben;5. mit der Vorgabe von 3. wird das am häufigsten aufgetrende Zeichen  mit dem vermutenden ``verglichen'' und der Text dekodiert;6. war das Ergebnis nicht erfolgreich, dann alles mit dem nächsten der  10 häufigsten Zeichen versuchen.\LiesText{Caesar.output}Aufgrund des Originaltextes und des verwendeten Alg. wurden Leerzeichenbeim Chiffrieren des Textes mit berücksichtigt, so dass die Wahrscheinlichkeitsehr groß ist, dass das Leerzeichen auch am häufigsten auftritt. Dieswird durch das Beispiel bestätigt, denn erst der zweite Versuch isterfolgreich, da das Vergleichszeichen ``e'' tatsächlich am zweithäufigstenauftrat. Hätte man dagegen als Vergleichszeichen gleich den Leerschritt(Space) vorgegeben, so wäre das Dekodieren gleich beim ersten Durchgangerfolgreich gewesen. Anzumerken ist noch, dass aufgrund des zum Verschlüsseln verwendetenAlg. nur Zeichen im Bereich 32-126 (Leerzeichen bis ~) verschlüsseltwerden. D.h. alle anderen Zeichen bleiben gleich, um Probleme mitder Bildschirmausgabe zu vermeiden. Auf das Dechiffrieren des Texteshat dies aber keine große Auswirkung. Der Alg. ist so aufgebaut, dassdie Entschlüsselung nur erfolgreich ist, wenn das ``Bezugszeichen''zu den zehn häufigsten verschlüsselten Zeichen des Textes gehört.Es ist aber kein Problem den Algorithmus auf alle 256 Zeichen zu erweitern.Dadurch dass der Originaltext und der verschlüsselte Text letztlichmit demselben Schlüssel\index{Schlüssel} behandelt wurden, verschlüsselnmit (schluessel=3)([footnote] vgl. Zeilen 6-7 in Alg..)  und entschlüsselnmit (schluessel=-3)([footnote] vergleiche die Zeile 45 und Ausgabedes Alg..) , gehört der Caesar\index{Caesar}-Algorithmus zu den symmetrischenVerfahren\index{symmetrische Verfahren}.\vspace{0.2cm}\fbox{Die Caesar-Verschlüsselung ist ein symmetrisches Verfahren}\vspace{1cm] 4 Polyalphabetische Verschlüsselung \resizebox*{!}{0.3\textheight}{\includegraphics{vigenere.eps}} \caption{Blaise de Vigen\´ere\footnotemark}Zu den bekanntesten gehört die sogenannte Vigenre\index{Vigenere}-Chiffrierung,die 1586 vom Franzosen Vigenre([footnote] Blaise de Vigenre (1523-1596),französischer Diplomat.)  entwickelt. Im Gegensatz zur Methode nachCaesar\index{Caesar}, die als monoalphabetische\index{monoalphabetisch}Chiffrierung bezeichnet werden kann, wechselt Vigenre sozusagen vonBuchstabe zu Buchstabe die Verschiebung. Grundlage dieser wechselndenVerschiebung ist ein Schlüsselwort, welches grundsätzlich beliebigist, jedoch dem Empfänger zusätzlich zum chiffrierten Text zu übermittelnwar.Wie bereits erwähnt wurde, gibt es zu jedem neuen Verschlüsselungsverfahrensofort das Bestreben, dieses zu entschlüsseln, sei es aus militärischen,kriminellen oder ganz einfach wissenschaftlichen Gründen. So war auchdas Verfahren von Vigenre relativ schnell verstanden worden, so dassman zu verschlüsselten Texten sehr schnell den Gegenschlüssel\index{Gegenschlüssel}bestimmen konnte.([footnote] 1863 durch den preußischen InfanteriemajorFriedrich Wilhelm Kasiski\index{Kasiski} (1805-1881). Ein zweitesVerfahren zum Entschlüsseln einer Vigenre-kodierten Nachricht wurde1925 von Colonel William Frederick Friedman\index{Friedman} (1891-1969)entwickelt. Beide Verfahren, der Kasiski-Test und der Friedman-Testwaren für das Verständnis über die Theorie der Kryptoanalyse äußerstwichtig.) 4.1 Beispiel zur KodierungDer Einfachheit halber wird in diesem Kapiel nur von Großbuchstabenausgegangen. Der Alg. berücksichtigt dagegen alle druckbaren Zeichennach ASCII. Als Schlüsselwort wird willkürlich ``HALLO'' gewählt.Der zu kodierende Text sei ``KRYPTOGRAFIE''. Dann wird wie folgt vorgegangen:([tab] Schlüsselwort(S): | H | A | L | L | O | H | A | L | L | O | H | A |+--------------------+---+---+---+---+---+---+---+---+---+---+---+---+| Klartext (K):      | K | R | Y | P | T | O | G | R | A | F | I | E |+--------------------+---+---+---+---+---+---+---+---+---+---+---+---+| Geheimtext (G):    | R | R | J | A | H | V | G | C | L | T | P | E |+--------------------+---+---+---+---+---+---+---+---+---+---+---+---+\label{Vig-Beispiel}Beispiel zur Verschlüsselung) Der erste Buchstabedes zu verschlüsselnden Textes ist K, im Vigenre-Quadrat wird jetztdie Zeile bestimmt, die mit dem zugehörigen Buchstaben des Schlüsselwortesbeginnt, d.h. eine Zeile mit ``H'' beginnend. In dieser Zeile gehtman jetzt soweit nach rechts, bis der zu verschlüsselnde Buchstabein der ersten Zeile erreicht ist, also bis ``K''. In der ``H''-Zeileist man jetzt beim Buchstaben R, der sozusagen im Fadenkreuz der Horizontalenund Vertikalen ist. Mit den anderen Buchstaben wird jetzt analog verfahren.([tab] A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P  | Q | R | S | T | U | V | W | X | Y | Z |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P  | Q | R | S | T | U | V | W | X | Y | Z |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q  | R | S | T | U | V | W | X | Y | Z | A |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R  | S | T | U | V | W | X | Y | Z | A | B |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S  | T | U | V | W | X | Y | Z | A | B | C |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T  | U | V | W | X | Y | Z | A | B | C | D |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U  | V | W | X | Y | Z | A | B | C | D | E |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V  | W | X | Y | Z | A | B | C | D | E | F |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W  | X | Y | Z | A | B | C | D | E | F | G |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X  | Y | Z | A | B | C | D | E | F | G | H |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y  | Z | A | B | C | D | E | F | G | H | I |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z  | A | B | C | D | E | F | G | H | I | J |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | A  | B | C | D | E | F | G | H | I | J | K |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | A |  B | C | D | E | F | G | H | I | J | K | L |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| N | O | P | Q | R | S | T | U | V | W | X | Y | Z | A | B | C  | D | E | F | G | H | I | J | K | L | M |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| O | P | Q | R | S | T | U | V | W | X | Y | Z | A | B | C | D  | E | F | G | H | I | J | K | L | M | N |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| P | Q | R | S | T | U | V | W | X | Y | Z | A | B | C | D | E  | F | G | H | I | J | K | L | M | N | O |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| Q | R | S | T | U | V | W | X | Y | Z | A | B | C | D | E | F  | G | H | I | J | K | L | M | N | O | P |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| R | S | T | U | V | W | X | Y | Z | A | B | C | D | E | F | G  | H | I | J | K | L | M | N | O | P | Q |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| S | T | U | V | W | X | Y | Z | A | B | C | D | E | F | G | H  | I | J | K | L | M | N | O | P | Q | R |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| T | U | V | W | X | Y | Z | A | B | C | D | E | F | G | H | I  | J | K | L | M | N | O | P | Q | R | S |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| U | V | W | X | Y | Z | A | B | C | D | E | F | G | H | I | J  | K | L | M | N | O | P | Q | R | S | T |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| V | W | X | Y | Z | A | B | C | D | E | F | G | H | I | J | K  | L | M | N | O | P | Q | R | S | T | U |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| W | X | Y | Z | A | B | C | D | E | F | G | H | I | J | K | L  | M | N | O | P | Q | R | S | T | U | V |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| X | Y | Z | A | B | C | D | E | F | G | H | I | J | K | L | M  | N | O | P | Q | R | S | T | U | V | W |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| Y | Z | A | B | C | D | E | F | G | H | I | J | K | L | M | N  | O | P | Q | R | S | T | U | V | W | X |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+| Z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O  | P | Q | R | S | T | U | V | W | X | Y |+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---+---+---+---+\label{Vignere-Quadrat}das Vigenre-Quadrat) 4.2 Der Algorithmus zum VerschlüsselnErsetzt man in Tab.\ref{Vig-Beispiel} die Buchstaben durch zugeordnetenatürliche Zahlen, z.B. A=0;\, B=1;\, C=2;..., so ergibt sich folgendeTab.\ref{VIG-Beispiel2}:([tab] Schlüsselwort (S): | 7  | 0  | 11 | 11 | 14 | 7  | 0 | 11 | 11 | 14 | 7  | 0 |+--------------------+----+----+----+----+----+----+---+----+----+----+----+---+| Klartext (K):      | 10 | 17 | 24 | 15 | 19 | 14 | 6 | 17 | 0  | 5  | 8  | 4 |+--------------------+----+----+----+----+----+----+---+----+----+----+----+---+| Geheimtext (G):    | 17 | 17 | 9  | 0  | 7  | 21 | 6 | 2  | 11 | 19 | 15 | 4 |+--------------------+----+----+----+----+----+----+---+----+----+----+----+---+\label{VIG-Beispiel2}Beispiel zur Verschlüsselung)  Dabei fällt auf, dass zwischen dem Schlüsselwortbuchstaben S, dem KlartextbuchstabenK und dem Geheimtextbuchstaben G eine einfache mathematische Beziehungbesteht. Dies wird deutlicher, wenn man sich die Tab.\ref{VIG-Beispiel2}in vertikaler Form hinschreibt. In der ersten allgemeinen Gleichungist das ``?'' als Platzhalter aufzufassen, welcher die Aufgabe hat,die Addition so zu ergänzen, dass sie jeweils zu einer wahren Aussageführt: \begin{array}{ccccccc}\mathbf{S} & + & \mathbf{K} & = & \mathbf{G} & + & ?\\7 & + & 10 & = & 17 &  & \\0 & + & 17 & = & 17 &  & \\11 & + & 24 & = & 9 & + & 26\\11 & + & 15 & = & 0 & + & 26\\14 & + & 19 & = & 7 & + & 26\\7 & + & 14 & = & 21 &  & \\0 & + & 6 & = & 6 &  & \\11 & + & 17 & = & 2 & + & 26\\11 & + & 0 & = & 11 &  & \\14 & + & 5 & = & 19 &  & \\7 & + & 8 & = & 15 &  & \\0 & + & 4 & = & 4 &  & \end{array}Der Zusammenhang ist leicht zu durchschauen:* gilt für die Summe aus Schlüsseltextbuchtstabe und Klartextbuchstabe  S+K\leq 26, so folgt aus Gl.\ref{vig1} für den Geheimtextbuchstaben G=S+K* gilt für die Summe S+K>26, z.B. die 3. Zeile 11+26>26, so folgt für  den verschlüsselten BuchstabenG=(S+K)\mod 26 denn für den Platzhalter  ``?'' kann jeweils 26 eingesetzt werden.Da der erste Fall durch die Modulofunktion\index{Modulofunktion} automatischim zweiten enthalten ist, braucht auch nur diese für die Verschlüsselungberücksichtigt zu werden. Daraus folgt dann weiter, dass das Vigenre-Quadrat(Tab.\ref{Vignere-Quadrat}) in keiner Weise extra berücksichtigt werdenmuss, da es implizit in Gl.\ref{Vig-Zuordnung} enthalten ist. Somitist auch der für die Verschlüsselung nach Vigenre zugrundeliegendeAlgorithmus eines läneren Textes sehr einfach (Alg.). Aufgerufen wirddie Verschlüsselungsmethode mit , wobei das Schlüsselwort\index{Schlüsselwort}nur aus reinen ASCII-Zeichen bestehen muss, also keine nationalenSonderzeichen enthalten darf. Die Datei des Klartextes darf beliebigsein.Bei der Ausgabe ist zu beachten das der Zeilenumbruch nur der Übersichtlichkeithalber vom Programm eingefügt wurde, jedoch nicht Bestandteil desOriginaltextes war. Vergleicht man die ersten drei Buchatben von Originaltextund verschlüsseltem Text, so lässt sich leicht kontrollieren, ob derAlgorithmus fehlerfrei gearbeitet hat:([tab] Schlüsselwort (S): | S | c | h | l | u |+--------------------+---+---+---+---+---+| Klartext (K):      | B | e | i |   | d |+--------------------+---+---+---+---+---+| Geheimtext (G):    | u | H | Q | l | Y |+--------------------+---+---+---+---+---+Kontrolle des Algorithmus) Dem Schlüsselwortbuchstaben ``S'' entspricht die Zahl 83-32=51, dennS ist im ASCII Nr. 83 und wird auf ``space'' (Nr. 32) bezogen. ``B''entspricht 66-32=34, woraus dann mit Gl.\ref{Vig-Zuordnung} unterBeachtung der Tatsache, dass das Alphabet wegen der zugelassenen Groß-/Kleinschreibungund Sonerzeichen insgesamt insgesamt 96 Zeichen umfasst, das GeheimzeichenG=(51+34)\mod 96=85, was dem Zeichen mit der Nummer 85+32=117, alsodem ``u'' entspricht. Die anderen Buchstaben können ebenso leichtnachvollzogen werden:([tab] (S):  | 83-32=51           | 99-32=67           | 104-32=72           | 108-32=76          | 117-32=85         |+-------+--------------------+--------------------+---------------------+--------------------+--------------------+| (K):  | 66-32=34           | 101-32=69          | 105-32=73           | 32-32=0            | 100-32=68          |+-------+--------------------+--------------------+---------------------+--------------------+--------------------+| (G):  | 85\mod 96=85       | 40                 | 49                  | 76                 | 57                 |+-------+--------------------+--------------------+---------------------+--------------------+--------------------+| ASCII | 85+32\rightarrow u | 40+32\rightarrow H | 49+32\rightarrow Q  | 76+32\rightarrow l | 57+32\rightarrow Y |+-------+--------------------+--------------------+---------------------+--------------------+--------------------+Die ersten fünf verschlüsselten Zeichen (G=(S+K)\mod 96): Schlüsselwort:``Schluesselwort''; Klartext: ``Bei d''; Geheimtext: ``uHQlY'') 4.3 Vigenre-Dekodierung4.3.1 Bei bekanntem SchlüsselwortDem Empfänger der Nachricht muss neben der Nachricht das Schlüsselwortund die zugrundeliegende Vigenre-Tabelle vorliegen. Die Tabelle, bzw.die erste Zeile ist jedoch nur dann dann wichtig, wenn diese nichtunbedingt mit dem Alphabet in der Standardreihenfolge (ABCDE...) beginnt.Ansonsten wird der Vorgang des Kodierens formal einfach umgekehrt;eine entsprechende Zeile des Vigenre-Quadrats wird dem ersten Buchstabendes Schlüsselwortes zugeordnet, also die ``H''-Zeile. In dieser Zeilewird bis zum betreffenden Buchstaben (``R'') der verschlüsselten Nachrichtnach rechts gegangen. Wieder befindet man sich in dem in Tab. \ref{Vignere-Quadrat}eingezeichneten Fadenkreuz, welches dann den unverschlüsselten Buchstaben``k'' aus der ersten Zeile dem verschlüsselten Buchstaben ``R'' zuordnet.Alle anderen Buchstaben werden entsprechend entschlüsselt.4.3.2 Bei unbekanntem SchlüsselwortWas bei der monoalphabetischen Verschlüsselung noch recht einfach war,erfordert hier einen erheblich höheren Aufwand, obwohl die Methode,die im vorhergehenden Kapitel angewandt wurde, prinzipiell auch hierzum Ziel führen kann. Ausgehend von Tab.\ref{Vig-Beispiel} erscheinteinleuchtend, dass jeder fünfte Buchstabe einer monoalphabetischenVerschlüsselung unterliegt. Die folgende Tabelle zeigt die jeweiligeDifferenz zwischen dem Schlüsselwortbuchstaben und dem Gegeimtextbuchstaben,wobei es wegen der Differenz unerheblich ist, ob die Zählung mit A=0oder A=1 beginnt.([tab] Schlüsselwort (S): | H | A | L   | L   | O   | H | A | L   | L  | O  | H | A |+--------------------+---+---+-----+-----+-----+---+---+-----+----+----+---+---+| Klartext (K):      | K | R | Y   | P   | T   | O | G | R   | A  | F  | I | E |+--------------------+---+---+-----+-----+-----+---+---+-----+----+----+---+---+| Geheimtext (G):    | R | R | J   | A   | H   | V | G | C   | L  | T  | P | E |+--------------------+---+---+-----+-----+-----+---+---+-----+----+----+---+---+| Differenz (G-K):   | 7 | 0 | -15 | -15 | -12 | 7 | 0 | -15 | 11 | 14 | 7 | 0 |+--------------------+---+---+-----+-----+-----+---+---+-----+----+----+---+---+| \mod 26            | 7 | 0 | 11  | 11  | 14  | 7 | 0 | 11  | 11 | 14 | 7 | 0 |+--------------------+---+---+-----+-----+-----+---+---+-----+----+----+---+---+``Caesar im Vigenre ...'') Die letzte Zeile erhält man unter Beachtung der Rotation (\mod 26),die die Aussage bestätigt, dass jeder i-te Buchstabe mit i=1,2,...,Schlüsselwortlängeum denselben Wert gegenüber dem Originalalphabet verschoben wurde,also einer monoalphabetischen Chiffrierung unterliegt. 5 Chiffrierzylinder\index{Chiffrierzylinder} und Rotormaschinen\index{Rotormaschinen}([footnote] vonEva Maria Vetter, Berlin 1999) 1915 erfand der Amerikaner Edward Hebern\index{Hebern} in Verbindungmit einer neu erschienen elektrischen Schreibmaschine eine Chiffriermaschinezum Verschlüsseln geheimer Texte. Die Maschine funktionierte sehreinfach: tippte man auf der Tastatur einer normalen elektrischen Schreibmaschinebeispielsweise den Buchstaben ``W'', so schloss sich ein Stromkreis,der dann einen Impuls an einen elektromagnetischen Antrieb weitergabund über einen Typenhebel den Buchstaben "K'' ausdruckte. Es war alsojede Taste dem jeweiligen Buchstaben zugeordnet. Heberns Chiffiiermaschinefunktionierte nun derart, dass die Tasten anderen Buchstaben zugeordnetwaren. So einfach die Maschine aufgebaut war, so einfach war sie auchzu handhaben. Man konnte sogar mit Hilfe einer zusätzlichen Schaltungverschlüsselte Texte eintippen, die dann entschlüsselt ausgedrucktwurden. Der Schwachpunkt dieser Maschine war, dass mit Hilfe einerBuchstabenhäufigkeitsanalyse jeder geübte Dechiffiierer in kurzerZeit die geheimen Texte entschlüsseln konnte. 1917 entwickelte Hebernseine Maschine aufgrund dieser Schwachstelle weiter und brachte dieerste sogenannte Rotormaschine auf den Markt. 5.1 Rotormaschine Rotormaschinen funktionieren folgendermaßen: bei dem einfachsten Modellhat man eine Scheibe, an deren linken sowie rechten Seite je 26 Kontaktflächen( = 26 Buchstaben) angebracht sind. Per Tastendruck wird eine Schleitkontaktmit einer der Kontaktflächen an der linken Seite der Scheibe hergestellt.Dieser Kontakt wird an eine der Kontaktflächen auf der rechten Seiteweitergeleitet, wodurch ein Lämpchen zum Blinken gebracht wird (Abb.\ref{rot1}). ([fig] \resizebox*{11cm}{!}{\includegraphics{rotation1.eps}} \label{rot1}DasRotationsprinzip) Nach jedem Zeichen wird die Scheibe nun eine Stelle weiter gedreht,wodurch ein Dechiffiierer mit einer Buchstabenhäufigkeitsanalyse nichtviel anfangen kann, da kein System zu erkennen ist. Zudem können dieScheiben ausgetauscht werden. Dieses Verfahren nennt man ([footnote] vgl.entsprechendes Kapitel) - Chiffrierung. Bald wurde das einfache Modellerweitert, indem man mehrere Scheiben, zumeist vier, verwendete: Dierechte Kontaktfläche der jeweils linken Scheibe wurde mit der linkenKontaktfläche der rechten Scheibe verbunden. ([fig] \resizebox*{10cm}{!}{\includegraphics{rotation2.eps}} \label{rot2}DasPrinzip der verketteten Scheiben) Das besondere an dieser Maschine ist, dass die vier Scheiben in Seriegeschaltet werden. Das heißt, dass sobald die erste Scheibe eine Umdrehung,also 26 Zeichen, gemacht hat, die zweite um eine Stelle weiter rückt,und nachdem die zweite Scheibe eine Umdrehung hinter sich gebrachthat, die dritte Scheibe um eine Stelle weiter rückt usw. Irn allgemeinenwerden die Scheiben als Walzen oder Rotoren bezeichnet - daher auchder Name Rotormaschine\index{Rotormaschine}. Heberns\index{Heberns}Rotormaschinen besaßen in der Regel fünf Rotoren, so dass sie 26^{5}=11.881.376verschiedene Schlüsselalphabete hervorbringen kann. Aufgrund diesergroßen Anzahl von Schlüsselalphabeten war es für die Dechiffiiererpraktisch unmöglich, mit Hilfe einer Buchstabenhäufigkeitsanalysedie Texte zu entschlüsseln. Es bestand zwar die Möglichkeit durchschwere mathematische Rechnungen den Klartext zu erhalten, doch wardiese Methode derart kompliziert und zeitaufwendig, dass eine abgefangeneMeldung, gerade in Kriegszeiten, nach der Entschlüsselung nicht mehraktuell gewesen wäre. Da es sich praktisch nicht lohnt, dieses Entschlüsselungsverfahrendurchzuführen, kann man Heberns Rotormaschine\index{Rotormaschine}als äußerst sicher bezeichnen. Vor der Eingabe des geheimen Texteshatte der Benutzer die Möglichkeit eine Schlüsselleitgruppe einzurosten.Das heißt, er konnte die Anfangsstellung der fünf Rotoren einstellen.Bei der Entschlüsselung ging man dann so vor, dass man die Maschinein dieselbe Anfangsstellung brachte und den verschlüsselten Text eingab,der dann Buchstabe für Buchstabe in den Sichtfeldem aufleuchtete. 5.2 Der technische Aufbau der Enigma\index{Enigma}Heberns Rotormaschine war die erste, die serienmäßig hergestellt wurde.Trotzdem war sie nicht die einzige. So hat zum Beispiel der HolländerJugo Koch\index{Koch} für seine Verschlüsselungsmaschine die Patentrechteerhalten. Da dieser aber nicht fähig war sein Konzept in eine funktionstüchtigeMaschine umzuwandeln, kaufte ihm der deutsche Ingenieur Arthur Scheribus\index{Scheribus}die Rechte ab und entwickelte 1923 in Berlin die Enigma\index{Enigma}.Enigma ist griechisch und bedeutet Rätsel. Auch die Enigma ist eine Rotormaschine\index{Rotornaschine}. Der Unterschiedzu den anderen Rotormaschinen besteht dann, dass nur drei der wieoben beschriebenen fünf Rotoren verwendet werden und anstelle desvierten, also ganz rechten Rotors, eine Scheibe kommt, die nur ander linken Seite Kontaktflächen besitzt.([fig] \resizebox*{8cm}{!}{\includegraphics{rotation3.eps}} \label{enigma1}DasPrinzip der Enigma)   Diese 26 Kontaktflächen sind untereinander verbunden,so dass der von der linken Seite kommende Kontakt an eine andere Kontaktflächeweitergeleitet wird und von dort auf umgekehrtem Wege zurückgeleitetwird - daher wird diese Scheibe auch als Umkehrwalze\index{Umkehrwalze}bzw. Reflektor\index{Reflektor} bezeichnet. Bei diesem Verfahren kann kein Buchstabe in sich selbst übergehen.Das heißt, man kann niemals beispielsweise ein "K' mit einem "K' verschlüsseln,weil dies zu einem Kurzschluss führt. Mit Hilfe eines Steckerbretteswurden die Buchstaben zusätzlich noch vor und nach der Verschlüsselungvertauscht, um die Sicherheit der Enigma-Maschine noch zusätzlichzu erhöhen. 5.3 Die Geschichte der EnigmaErstmals öffentlich vorgestellt wurde die Enigma auf dem Kongress derInternationalen Postunion und auf der Leipziger Messe. Sie galt alspreiswert, zuverlässig und abhörsicher und war zur Übermittlung vongeschäftlichen Mitteilungen sowie Telegrammen gedacht. Sehr interessiertan der Enigma\index{Enigma} zeigte sich die deutsche Reichswehr. OberstErich Fellgiebel\index{Fellgiebel}, ein Nachrichtenoffizier nahm dieMaschine genauer unter die Lupe und entschied sich, sie vom zivilenMarkt zurückzunehmen und statt dessen in der Chiffierabteilung\index{Chiffierabteilung}der Reichswehr\index{Reichswehr} einzusetzen. Als die Enigma erschien, war das deutsche Heer auf Grund des VersaillerVertrages auf nur 100.000 Mann beschränkt. Deutschland steckte geradein einer Phase des politischen Umbruchs. Die Nationalsozialisten gewannenan Macht und übernahmen 1933 die Regierung. Reichskanzler Adolf Hitlerbereitete das Militär auf die sogenannte Blitzkrieg-Strategie vor,mit welcher 1939 dann ja auch der Zweite Weltkrieg in Polen begonnenwurde. Da dieses Angriffsverfahren, um erfolgreich zu sein, schnellerHandlungen und guter Zusammenarbeit von Heeresstreitkräften und Luftwaffebedurfte, sollte es an einer schnellen und zuverlässigen Nachrichtenverbindungnicht mangeln. Zu diesem Zwecke schien die Enigma sehr geeignet, dasie mit Batterien betrieben wurde und so robust war, dass sie problemlosüberall hin mitgenommen werden konnte. Zur Sicherheit der ENIGMA äusserte sich der Oberst Erich Fellgiebelfolgendermaßen: . . . die Meldungen [wären] überhaupt nicht zu dechiffrieren [...],sofern [der Gegner] nicht selbst über eine Enigma verfügte. Und sogarmit einer (erbeuteten) Enigma, mit der es dann möglich sein könnte,den Kode zu brechen würde dies eine Fähigkeit und Können erfordern,über die nur wenige Chiffrierexperten verfügten. Den Polen, die über einen äußerst wirksamen Nachrichtendienst verfügten,gelang es in ihrer Chiffierabteilung das sowjetische sowie das deutscheGeheimschlüsselverfahren zu entschlüsseln, so dass sie sämtliche Meldungender Deutschen abhören konnten. Als die Reichswehr dann 1928 die Enigmaeinführte, war es den Polen zunächst nicht mehr möglich, die militärischenMeldungen mitzulesen. Den Polen war klar, dass die Deutschen höchstwahrscheinlichim Besitz solcher Enigma-Maschinen waren, wie sie Scheribus\index{Scheribus}auf der Leipziger Ausstellung vorgestellt hatte. Deshalb wollten sieversuchen, sich eines dieser Geräte zu besorgen. Eine günstige Gelegenheitdazu gab es 1927, als das auswärtige Amt in Berlin versehentlich eineEnigma als Frachtgut an die deutsche Botschaft in Warschau sandte.Die Maschine wurde dort vom Zoll abgefangen und genauer untersucht.Durch diese Begutachtung konnten die Polen das System des Geräteserkennen und anschließend drei junge Mathematiker der Posener Universität,wo man größtenteils deutsch sprach, damit beauftragen, diese Maschinegut zu erforschen und das System zu entschlüsseln. Dies gelang MarianRejewski\index{Rejewski}, Jerzy Rozyki\index{Rozyki} und Henry Zygalski\index{Zygalski}dann auch nach nur viereinhalb Monaten. Etwas später konnte man dannsogar über einen schwedischen Kontaktmann eine zivile deutsche Enigma\index{Enigma}beziehen, die man durch einige zusätzliche Einbauten der militärischenEnigma gleich machen konnte. Man erkannte nun eine wichtige Besonderheit der Maschine: ein Buchstabeging bei der Verschlüsselung niemals in sich selbst über, so dassman die negative Mustersuche anwenden konnte. Wenn aus dem Klartextnur ein Wort, beispielsweise "Oberkommandowehrmacht" bekannt ist,kann man im Geheimtext nach einer Stelle suchen, an der die 21 Buchstabendes Wortes des Klartextes mit denen des Geheimtextes nicht übereinstimmen.Die Wahrscheinlichkeit, dass man eine solche Stelle findet liegt derStatistik nach bei 56%, denn1-\left( 1-\frac{1}{26}\right) ^{21}=0.5611...Im Jahre 1932 erhielten dann die Franzosen von einem Bedienstetenaus dem deutschen Reichswehrministerium, dem Spion ``Asche'', einesehr wertvolle Hilfe. Neben einigen anderen deutschen Dokumenten verkaufteer ihnen die deutsche Heeresvorschrift ``Gebrauchsanleitung für dieChiffriermaschine Enigma'' und ein Verschlüsselungsbuch mit den Schlüsselnfür September und Oktober und einem Übungsbeispiel für eine verschlüsselteNachricht mit dazugehörigem Klartext. Da weder Franzosen noch Britenviel mit dem Material anzufangen wußten, wurde es kopiert und an diePolen weitergegeben. In dem Verschlüsselungsbuch war für jeden Tageine Grundstellung angegeben, die die Auswahl und Anordnung der Rotorenund die Lage der Buchstabenringe zu den Rotoren festlegte. Der Funkerlegte nun selbst einen Spruchschlüssel, beispielsweise ``gke'' fest,den er dem Empfänger in der Grundstellung mitteilte. ([fig] \resizebox*{8cm}{!}{\includegraphics{rotation4.eps}} \label{enigma2}Schlüsselfestlegung) Die darauf folgende Mitteilung wurde dann mit dem Spruchschlüssel verschlüsselt.Eine zusätzliche Sicherheit entstand dadurch, dass ein Offizier dieMaschine in die Grundstellung brachte und ein Funker dann den Spruchschlüsselfestlegte. Somit war dem einen der Schlüssel des anderen unbekannt.Es war jedoch so, dass die deutschen Funker als Spruchschlüssel häufigBuchstabenfolgen wie ,aaa' oder bbb' auswählten. Es wurde später zwarverboten, in einem Schlüssel denselben Buchstaben zweimal zu verwenden,doch nun nahmen die Funker des öfteren auf der Tastatur nebeneinanderliegende Buchstaben. Durch diese Fehler war der Spruchschlüssel\index{Spruchschlüssel},der ja eigentlich die Sicherheit der Enigma erhöhen sollte, den Gegnernzu einer wichtigen Hilfe beim Entschlüsseln von Nachrichten geworden.Denn dadurch, dass häufig dieselben Schlüssel verwendet wurden, warder Schlüsselraum reduziert und die Gegner fingen öfters Meldungenab, die mit demselben Schlüssel verschlüsselt waren. Ein weiterer Punkt, der den Gegnern bei der Entschlüsselung half, wardie Verdoppelung des Spruchschlüssels: bei Übertragungsstörungen passiertees gelegentlich, dass der Spruchschlüssel verlorenging und man ineinigen Situationen die Meldung nicht wiederholen konnte, beispielsweisewenn den U-Booten Funkstille angeordnet wurde, damit die Angreifersie nicht finden konnten. Um sicherzustellen, dass die Nachricht vomEmpfänger entschlüsselt werden konnte, gab man den Schlüssel zweimalhintereinander ein, z.B. ``uznuzn''. Einer der drei polnischen Mathematiker,Marian Rejewski\index{Rejewski}, hatte erkannt, dass es sich bei denersten sechs Zeichen um einen Schlüssel handeln musste, der aus dreiBuchstaben bestand und einmal wiederholt wurde. Da es sich nur umsechs verschlüsselte Zeichen handelte, wurde meistens nur der ersteRotor betätigt. So gelang es den Polen, die innere Verdrahtung desersten Rotors zu erforschen und da die Rotoren vierteljährlich ausgetauschtwurden, bald auch die der anderen. Die Polen konnten somit eine Enigmamit fünf möglichen Walzen nachbauen und diese auch an Frankreich undEngland weitergeben. Um die abgefangenen Meldungen der Deutschen mit der nachgebauten Enigmaentschlüsseln zu können, wurde von Rozycki\index{Rozycki} eine Maschinenamens ``Bomba\index{Bomba}'' gebaut, die alle Buchstabenkombinationendurchlief, bis der richtige Spruchschlüssel zum Entziffern des Geheimtextesgefunden war. Wie das Bombagerät im Einzelnen aufgebaut war und wiees funktionierte ist unbekannt, da keine der Maschinen den Krieg überlebthat. Bis Ende 1938 konnten mit großem Erfolg viele der deutschen Meldungenabgehört werden. Doch dann bekamen die Enigma-Maschinen noch zweizusätzliche Rotoren.Sie hatten jetzt insgesamt fünf, von denen immer drei in die Geräteeingesetzt wurden. Die Maschinen waren damit wesentlich sicherer geworden.Um weiterhin abgefangene Nachrichten zu entschlüsseln, hätten diePolen weitere der teuren Bombageräte benötigt. Da es aber an Geldfehlte, beschlossen Franzosen, Briten und Polen 1939, noch vor Kriegsbeginn,zusammenzuarbeiten. ([fig] \resizebox*{4cm}{!}{\includegraphics{enigmrot.eps}} \label{enigma3}EnigmaRotoren) Die Arbeiten, die zu weiteren Entschlüsselung von Texten nötig waren,wurden folgendermaßen aufgeteilt: * Die Polen sollten ihre mathematischen Arbeiten an den Enigma- Schlüsseln  fortfahren. * Die Franzosen sollten weiterhin ihre Kontakte zu den deutschen Agenten  pflegen. * Die Briten sollten mit allen Mitteln versuchen, möglichst viele der  Bombageräte zu bauen. ([fig] \resizebox*{8cm}{!}{\includegraphics{enigma2.eps}} \label{enigma4}Enigma) Ungefährzu der Zeit als die beiden neuen Rotoren eingeführt wurden schienendie deutschen Nachrichten plötzlich unentschlüsselbar. Zuerst vermuteteman eine andere Verschlüsselungsmethode, doch dann erkannten die Polenaufgrund eines Fehlers der Deutschen, dass man die Meldungen, bevorsie mit der Enigma\index{Enigma} verschlüsselt wurden, noch zusätzlichmit einer Bigramm\index{Bigramm}-Methode verschlüsselte. So konnteman bald auch die neuen Walzen erforschen und es wieder möglich machen,deutsche Nachrichten zu entschlüsseln. Am 1.9.1939 begann dann derZweite Weltkrieg mit einem Angriff der Deutschen auf Polen. Bald erkannteman, daá das Land überrollt werden würde und evakuierte daher denGeheimdienst aus Warschau. Aus Angst, dass bei der Flucht eine derBombageräte den Deutschen in die Hände fällt, zerstörte man sämtliche. Die Reise der Enigma-Techniker ging zunächst nach Bukarest und vondort aus weiter in die Nähe von Paris, wo einschließlich der dreiMathematiker alle wohlbehalten eintrafen. Hier baute man sich neueEnigma-Maschinen, obwohl diese ohne die Bombageräte wertlos waren.Trotzdem wurden die mathematischen Analysen der abgehörten Meldungenfortgesetzt. Ab 1940 schrieben die Deutschen vor ihre Meldungen denSpruchschlüssel\index{Spruchschlüssel} nicht mehr in doppelter Form,da sie die Schwachstelle erkannten. Aber mittlerweile war die Enigmavon den Briten so gut erforscht worden, dass sie auch ohne diese Hilfedie Meldungen entschlüsseln konnten. Oftmals halfen ihnen dabei Textabschnitte,wie ``HEILHITLER'' oder ``KEINEBESONDERENVORKOMNISSE'' weiter, diehäufig auftauchten. An Klartext kamen die Gegner gelegentlich auchdadurch, da die Meldungen die die U-Boote entsandten, mit sehr einfachenMethoden verschlüsselt waren, da die Nachrichtenübernittlung sehrschnell gehen musste, wenn beispielsweise ein Treibmine entdeckt wurde. Wenn die Deutschen keine Fehler machten, ließen sich die Engländerwas einfallen. Beispielsweise bombardierten sie eine Leuchtboje, nurdamit ein Funker die Meldung "ERLOSCHENISTLEUCHTTONNE" durchgibt.1941 starteten die Engländer einen Angriff auf eine norwegische Inselgruppe.Sie enterten einen Fischdampfer, dessen Besatzung nicht mehr allegeheimen Unterlagen vernichten konnte. So kamen die Briten an zwei,ihnen allerdings schon bekannte, Rotoren und an die Grundschlüsselvom Februar. So war es ihnen möglich, einige der abgefangenen Meldungennoch im Nachhinein zu entschlüsseln. Dadurch erlangten sie die wichtigeInformation, daá auch die deutschen Wetterbeobachtungsschiffe mitder Enigma arbeiten und hierfür spezielle Codebücher besaßen. Manvermutete, dass die Schiffe, die ja oftmals monatelang unterwegs waren,die Codebücher für längere Zeiträume an Bord hatten. Am Mai 1941 startetendie Briten ihren ersten Versuch und raubten einem deutschen Schiffnordöstlich von Island das Codebuch für den Juni 1941. Hinterher versenktensie das Schiff, um die Deutschen glauben zu lassen, die Unterlagenseien mit dem Schiff untergegangen. Wenig später fiel den Engländernein deutsches U-Boot in die Hände, das reichhaltiges Material an Bordhatte. Die Anzahl der Menschen, die sich mit der Entschlüsselung vondeutschen Meldungen beschäftigten, wurde immer größer. Ab 1940 wurden regelmäßig die Nachrichten der Luftwaffe, ab 1941 auchdie der Marine abgehört. Diese Dechiffierer haben den Kriegsverlaufzum Teil stark beeinflusst, da unter anderem viele der äußerst gefährlichenU-Bootangriffe verhindert werden konnten. Es wird sogar darüber spekuliert,dass die Invasion der Alliierten ohne das Entschlüsseln der Meldungenerst 1946 oder 1947 stattgefunden hätte und dass die USA, wenn dieSowjetunion bis dahin nicht den Krieg beendet hätte, auch in EuropaAtombomben abgeworfen hätten. Zudem glaubt man, dass die Mathematikohne das Entschlüsseln der Enigma heute nicht auf demselben Standwäre. 5.4 Enigma nach 1945Dass das Prinzip der Enigma gebrochen worden war, wurde vermutlicherst 1974 mit dem Buch "The Ultra Secret" von Wintherbotham\index{Wintherbotham}bekannt. Im Mai 1994 machte Keith Lockstone\index{Lockstone} einigeAngaben dazu, was mit der Enigma nach dem Krieg geschah. Ihm zufolgewurden die Maschinen in Deutschland und der Schweiz weiterhin produziertund nach Afrika, den Nahen Osten und Südamerika verkauft, obwohl dieSchweizer bereits seit 1943 wussten, dass die Gegner die Enigma entschlüsselthatten. Die USA verkauften ebenfalls die Enigma\index{Enigma}  anDritte-Welt-Länder, mit dem Vorhaben deren Meldungen abzuhören. Auchdie Sowjetunion, die die Enigma unabhängig von den anderen Ländernentschlüsselt hatte, hielt dieses geheim. 6 Data Encryption Standard\index{Data Encryption System}([footnote] Häufigauch als Data Encrpytion System bezeichnet, obwohl die eigentlichevon IBM gewählte Bezeichnung Data Encryption Algorithm (DEA) ist..) Bekannter unter der Abkürzung DES\index{DES} ist es das zur Zeit bekanntesteund sehr häufig angewendete symmetrische Verschlüsselungsverfahren.Es ist das Ergebnis langer Untersuchungen der Firma IBM über kryptographischeVerfahren und mittlerweile in mehreren Varianten vorhanden (Tab.\ref{hash}).Es unterliegt insbesondere in den USA mehreren Restriktionen bezüglichseiner Verbreitung, da es offiziell vom U.S. Department of Commercezum Standard erklärt wurde.\cite{pub46-2} Aufgrund der immer wiederauftretenden Angriffe auf das DES-Verfahren wird bis zur Entwicklungeines anderen Verfahrens nur noch das sogenannte Triple-DES angewendet.6.1 Die Feistel-ChiffreDas DES basiert auf der sogenannten Feistel-Chiffre\index{Feistel-Chiffre}\cite{buchmann:00, feistel:73},welches Ähnlichkeiten zum Vigenre\index{ere}-Verfahren aufweist, welchesim folgenden an einem Beispiel erklärt wird.([footnote] Horst Feistel(IBM Deutschland) veröffentlichte 1973 dieses Verfahren.)  Gegeben ist ein zu verschlüsselnder Text der Länge 2t und dem Alphabet\{0,1\}, also ein geradzahliger Binärtext, p=01010110_{2}=56_{16}=96_{10}der dem Zeichen <'> enstpricht (Hochkomma). Der Binärtext wird ineine linke und rechte Hälfte unterteilt:p=p_{0}=(L_{0},R_{0})=(0101,\, 0110)Mit der noch festzulegenden Schlüsselfunktion f_{K}(x) wird eine Folgevon links- und rechtsseitigen Binärfolgen erzeugt. Je größer die Folgedesto größer auch die Sicherheit der Feistelchiffre\index{Feistelchiffre}:p_{i}=\left( L_{i},R_{i}\right) =\left( R_{i-1},\, L_{i-1}\oplus f_{K_{i}}\left( R_{i-1}\right) \right) ,\qquad i=1,2,...,r\quad r\in \mathds {N}Der endgültig verschlüsselte Text entspricht dann E(p)=E_{r}(L_{0},R_{0})=(R_{r},L_{r}).In Gl.\ref{Feistel-Gl} sind die f_{K_{i}} die einzelnen Schlüsselder Schlüsselfolge, die letztlich willkürlich gewählt werden könnenund für das hier gegebene Beispiel als reine Schiebeschlüssel([footnote] \label{Fuss-Shift}Shiftrechts auf 0001 angewendet ergibt dann unter Berücksichtigung derRotation 1000. Doppelt shift rechts führt zu 0100. )  definiert werden.f_{K_{1}} & : & shift\, Rechts\nonumber \\f_{K_{2}} & : & shift\, Links\\f_{K_{3}} & : & doppelt\, shift\, Rechts\nonumber \\ &  & (\textrm{Shiften jeweils mit Rotation})\nonumber  Eine willkürliche Zuordnung wäre zum Beispiel f_{K}=\left( \begin{array}{cccc}1 & 2 & 3 & 4\\2 & 4 & 1 & 3\end{array}\right) ([footnote] Dieerste Zeile der Schlüsselmatrix entspricht dem Original, die zweiteder Verschlüsselung.) , d.h. das erste Bit wandert an die zweite Stelle,das zweite Bit an die vierte, das dritte an die erste und das vierteBit an die dritte Stelle. Insgesamt gibt es bei dem hier gewähltenBeispiel 2^{4} verschiedene Schlüssel. Für die sogenannte Rundenzahl\index{Rundenzahl}ergibt sich aus Gl.\ref{Feistel-Gl} r=3. Sämtliche Durchgänge sollenin aller Ausführlichkeit erklärt werden: \left( L_{1},R_{1}\right)  & = & \left( R_{0},\, L_{0}\oplus f_{K_{1}}(R_{0})\right) \nonumber \\ & = & \left( 0110,\, 0101\oplus f_{K_{1}}(0110)\right) \label{Runde1} \\f_{K_{1}}(0110) & = & 0011\quad (\textrm{rechts shiften})\nonumber \\0101 & \oplus  & 0011=0110\nonumber \\\left( L_{1},R_{1}\right)  & = & (0110,\, 0110)\nonumber Die logische Verknüpfung ``\oplus '' entspricht hier der binären Additionohne Übertrag (Exclusiv-Oder).([footnote] Mathematisch betrachtetist es eine binäre Addition Modulo 2. (0+0)\mod 2 & = & 0\\(0+1)\mod 2 & = & 1\\(1+0)\mod 2 & = & 1\\(1+1)\mod 2 & = & 0) Die folgenden Runden der Chiffrierung laufen analog zu Gl.\ref{Runde1}ab: \left( L_{2},R_{2}\right)  & = & \left( R_{1},\, L_{1}\oplus f_{K_{2}}(R_{1})\right) \nonumber \\ & = & \left( 0110,\, 0110\oplus f_{K_{2}}(0110)\right) \nonumber \\f_{K_{2}}(0110) & = & 1100\quad (\textrm{links shiften})\\0110 & \oplus  & 1100=1010\nonumber \\\left( L_{2},R_{2}\right)  & = & (0110,\, 1010)\nonumber \left( L_{3},R_{3}\right)  & = & \left( R_{2},\, L_{2}\oplus f_{K_{3}}(R_{2})\right) \nonumber \\ & = & \left( 1010,\, 0110\oplus f_{K_{3}}(1010)\right) \nonumber \\f_{K_{3}}(1010) & = & 1010\quad (\textrm{doppelt}\, \textrm{rechts shiften})\\0110 & \oplus  & 1010=1100\nonumber \\\left( L_{3},R_{3}\right)  & = & (1010,\, 1100)\nonumber Damit ist die Verschlüsselung des Originalwortes (Gl.\ref{Wort}) beendet,dem Zeichen <'> (Hochkomma) wird also das Zeichen <>mit der dezimalenNummer 202 zugeordnet.p=01010110\Rightarrow E_{3}=(R_{r},L_{r})=11001010_{2}=CA_{16}=202_{10}Die Feistel-Chiffre als sogenannte symmetrische Chiffre wird mit demselbenSchlüssel, bzw. derselben Schlüsselfolge entschlüsselt, wobei sichder Algorithmus eigentlich aus Gl.\ref{Feistel-Gl} ergibt: \left( R_{i-1},\, L_{i-1}\right) =\left( L_{i},\, R_{i}\oplus f_{K_{i}}\left( L_{i}\right) \right) ,\qquad i=1,2,...,r\quad r\in \mathds {N}Hierbei sind die Schlüsselfolgen in umgekehrter Reihenfolge anzuwenden,was im folgenden wieder ausführlich gezeigt werden soll. Ausgangspunktist das verschlüsselte Wort nach Gl.\ref{Wort-verschluesselt}, dieAnwendung der verschiedenen Schlüssel erfolgt jetzt rückwärts (i=r,r-1,r-2,...,3,2,1):\left( R_{3},\, L_{3}\right)  & = & (1100,\, 1010)\nonumber \\\left( R_{2},\, L_{2}\right)  & = & \left( L_{3},\, R_{3}\oplus f_{K_{3}}(L_{3})\right) \nonumber \\ & = & \left( 1010,\, 1100\oplus f_{K_{3}}(1010)\right) \nonumber \\f_{K_{3}}(1010) & = & 1010\quad (\textrm{doppelt}\, \textrm{rechts shiften})\\1100 & \oplus  & 1010=0110\nonumber \\\left( R_{2},L_{2}\right)  & = & (1010,\, 0110)\nonumber  \left( R_{1},\, L_{1}\right)  & = & \left( L_{2},\, R_{2}\oplus f_{K_{2}}(L_{2})\right) \nonumber \\ & = & \left( 0110,\, 1010\oplus f_{K_{2}}(0110)\right) \nonumber \\f_{K_{2}}(0110) & = & 1100\quad (\textrm{links shiften})\\1010 & \oplus  & 1100=0110\nonumber \\\left( R_{1},L_{1}\right)  & = & (0110,\, 0110)\nonumber \left( R_{0},\, L_{0}\right)  & = & \left( L_{1},\, R_{1}\oplus f_{K_{1}}(L_{1})\right) \nonumber \\ & = & \left( 0110,\, 0110\oplus f_{K_{2}}(0110)\right) \nonumber \\f_{K_{1}}(0110) & = & 0011\quad (\textrm{rechts shiften})\\0110 & \oplus  & 0011=0101\nonumber \\\left( R_{0},L_{0}\right)  & = & (0110,0101)\nonumber Das entschlüsselte Originalwort ist p=(L_{0},\, R_{0})=01010110 undentspricht somit eindeutig Gl.\ref{Wort}.6.2 \label{Kap-DES}DESPrinzipiell unterscheidet sich der DES-Algorithmus nicht wesentlichvon der Feistel-Chiffre\index{Feistel-Chiffre}, wenn man hier einmaldavon absieht, dass im Gegensatz zum obigen Beispiel natürlich erheblichlängere Blocklängen verwendet werden. Grundsätzlich verwendet man für das DES-Verschlüsselungsverfahren wiederein binäres Alphabet \{0,1\} mit einer Blocklänge von 64 Bit \{0,1\}^{64}.Da aufgrund des Verfahrens Blocklänge\index{Blocklänge} und Schlüssellänge\index{Schlüssellänge}identisch sind, gibt es formal 2^{64} verschiedene Schlüssel. Um technischbedingte Fehler bei der Datenübertragung leichter erkennen zu können,reduziert man die Möglichkeiten, indem die 64 Bit in 8 Byte-Blöckeunterteilt werden, wobei das letzte Bit eines jeden Byte-Blocks inAbhängigkeit der anderen Bits gesetzt wird:Für einen gültigen n-Byte langen DES-Schlüssel wird das letzte Biteines jeden Byte-Blocks so gesetzt, dass die Summe der gesetzten Bitseinschliesslich des letzten Bits ungeradzahlig ist.Ein gültiger Schlüssel wäre dann z.B.\begin{array}{cccccccc}0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\quad \quad 8.\, Byte\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\quad \quad 7.\, Byte\\0 & 0 & 0 & 0 & 0 & 1 & 1 & 1\quad \quad 6.\, Byte\\1 & 0 & 1 & 0 & 1 & 0 & 1 & 1\quad \quad 5.\, Byte\\0 & 1 & 0 & 1 & 0 & 1 & 0 & 0\quad \quad 4.\, Byte\\1 & 1 & 0 & 0 & 1 & 1 & 0 & 1\quad \quad 3.\, Byte\\1 & 1 & 1 & 0 & 0 & 0 & 1 & 1\quad \quad 2.\, Byte\\1 & 1 & 1 & 1 & 0 & 0 & 1 & 0\quad \quad 1.\, Byte\end{array}Es lässt sich leicht überprüfen, dass das jeweils rechte Bit einerjeden Zeile in Abhängigkeit der ersten sieben Bits derart gesetztwurde, dass die Anzahl der gesetzten Bits (``1'') ungeradzahlig ist.In hexadezimaler Form entspricht dieser Schlüssel \kappa =01\textrm{FE}07\textrm{AB}54\textrm{CDE}3\textrm{F}2_{16}.Mathematisch formuliert ergeben sich die gültigen Schlüssel aus:\kappa =\{(b_{63},\ldots ,b_{0})\in \{0,1\}^{64}:\quad \sum _{i=0}^{i=7}b_{8k+i}\mod 2=1,\quad k=0,2,...,7 Bedingt durch das letzte Kontrollbit gibt es insgesamt 2^{56}\approx 7,2\cdot 10^{16}mögliche DES-Schlüssel\index{DES-Schlüssel}, die alle bezüglich ihrerSicherheit gleichwertig sind. Alg.\ref{DESSchluessel.java} zeigt diebeiden Methoden public void ByteFeldSchluessel(byte [][] Feld) sowie zum Generieren eines gültigen DES-Schlüssels, wie ihn die folgendeProgrammausgabe zeigt. Zu beachten ist, dass zwei verschiedene DES-Schlüsselerzeugt werden, einer mithilfe eines Bytefeldes und der andere mithilfeeines BigIntegers aus der Klasse .6.2.1 Die initiale Permutation\index{Permutation}Auf jedes Original p der Länge 64 Bit wird eine sogenannte initialePermutation angewendet, die unabhängig vom gewählten Schlüssel ist,aber dennoch einer initialen Chiffrierung entspricht. Ausgehend vondem 64 Bit-Block:p=\left( \begin{array}{cccccccc}63 & 62 & 61 & 60 & 59 & 58 & 57 & 56\\55 & 54 & 53 & 52 & 51 & 50 & 49 & 48\\47 & 46 & 45 & 44 & 43 & 42 & 41 & 40\\39 & 38 & 37 & 36 & 35 & 34 & 33 & 32\\31 & 30 & 29 & 28 & 27 & 26 & 25 & 24\\23 & 22 & 21 & 20 & 19 & 18 & 17 & 16\\15 & 14 & 13 & 12 & 11 & 10 & 9 & 8\\7 & 6 & 5 & 4 & 3 & 2 & 1 & 0\end{array}\right) erfolgt eine erste Anwendung durch die folgende initiale Bitpermutation\index{Bitpermutation}IP(p)=\left( \begin{array}{cccccccc}6 & 14 & 22 & 30 & 38 & 46 & 54 & 62\\4 & 12 & 20 & 28 & 36 & 44 & 52 & 60\\2 & 10 & 18 & 26 & 34 & 42 & 50 & 58\\0 & 8 & 16 & 24 & 32 & 40 & 48 & 56\\7 & 15 & 23 & 31 & 39 & 47 & 55 & 63\\5 & 13 & 21 & 29 & 37 & 45 & 53 & 61\\3 & 11 & 19 & 27 & 35 & 43 & 51 & 59\\1 & 9 & 17 & 25 & 33 & 41 & 49 & 57\end{array}\right) Die erste Zeile der initialen Permutation IP entspricht der umgekehrtenzweiten Spalte des Originals p, die zweite Zeile von IP der umgekehrtenvierten Spalte usw. Beginnt man die Zählung der Zeilen und Spaltenmit 0, so kommt auf den Platz (zeile,spalte) der initialen MatrixIP(zeile,spalte) das Element welches in der originalen Matrix aufdem Platz (7-spalte;(zeile\cdot 2+1)\mod 9) war.([footnote] Das ersteElement der ersten Zeile von IP steht auf dem Platz (0;0). Diesemwird jetzt das Element P(7-spalte;(zeile\cdot 2+1)\mod 9)=P(7;1) zugewiesen.) Anders ausgedrückt: das erste Bit des ersten Bytes des Originals (p_{0}:\, 0.\textrm{Bit})wandert durch die initiale Permutation also an die letzte Stelle desfünften Bytes: p_{0}\rightarrow p_{39}, während p_{39} an die vierteStelle des vierten Bytes wandert: p_{39}\rightarrow p_{27}. Gl. \ref{IP-Beispiel}zeigt an einem willkürlichen Beispiel die Anwendung der initialenPermutation, während die Ausgabedie Anwendung der Methode auf dasoben angegeben Beispiel von Alg.\ref{DESSchluessel.java} zeigt:\left( \begin{array}{cccccccc}0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\0 & 0 & 0 & 0 & 0 & 1 & 1 & 1\\1 & 0 & 1 & 0 & 1 & 0 & 1 & 1\\0 & 1 & 0 & 1 & 0 & 1 & 0 & 0\\1 & 1 & 0 & 0 & 1 & 1 & 0 & 1\\1 & 1 & 1 & 0 & 0 & 0 & 1 & 1\\1 & 1 & 1 & 1 & 0 & 0 & 1 & 0\end{array}\right)  & \rightarrow  & \left( \begin{array}{cccccccc}1 & 1 & 1 & 1 & 0 & 0 & 1 & 0\\1 & 0 & 0 & 1 & 0 & 0 & 1 & 0\\0 & 0 & 1 & 1 & 0 & 1 & 1 & 0\\0 & 1 & 1 & 0 & 1 & 1 & 0 & 0\\1 & 1 & 1 & 0 & 1 & 0 & 1 & 0\\1 & 1 & 0 & 0 & 1 & 0 & 1 & 0\\0 & 0 & 1 & 0 & 1 & 0 & 1 & 0\\1 & 1 & 0 & 0 & 1 & 1 & 1 & 0\end{array}\right) \label{IP-Beispiel} \\p & \rightarrow  & IP(p)\nonumber Alg.\ref{IP.java} zeigt die Methode .6.2.2 Anwendung der Feistel-ChiffreMit dieser ersten Veränderung des originalen Klartextes wird jetzteine 16 Runden Feistel-Chiffre durchgeführt, die analog zum vorhergehendenKapiel verläuft, d.h. es erfolgt wieder eine Unterteilung in einelinke L_{0} und eine rechte Hälfte R_{0}, die jeweils eine Länge von32-Bit haben. Gl.\ref{IP-Beispiel} ergibt daher die folgenden beidenBlöcke:L_{0} & = & 11110010100100100011011001101100\label{Bsp-Links} \\R_{0} & = & 11101010110010100010101011001110\nonumber \label{Bsp-Rechts} Bei der ``normalen'' Feistel-Chiffre würde jetzt direkt Gl.\ref{Feistel-Gl}angewendet. Beim DES-Verfahren wird dies leicht modifiziert, indemfür die einzelnen Runden gilt:E_{i+1}=\left( L_{i+1},R_{i+1}\right) =\left( R_{i},L_{i}\oplus f\left( R_{i},K_{i+1}\right) \right) Der einzige Unterschied zu Gl.\ref{Feistel-Gl} ergibt sich durch dieFunktion f\left( R_{i},K_{i+1}\right) . Abb.\ref{DES-Feistel} zeigtden gesamten Vorgang der Bildung dieser Teilfunktion im Überblick.Ausgehend von der rechten Hälfte R_{i} und dem Grundschlüssel K erfolgtzuerst eine Expansion\index{Expansion} der rechten Hälfte von 32 Bitauf 48 Bit und eine Reduktion des Grundschlüssels von 64 Bit auf ebenfalls48 Bit, dann eine normale binäre Addition ohne Übertrag([footnote] Entsprichtbinärer Addition modulo 2.)  und eine abschliessende Reduktion, um wiederauf die 32-Bit-Länge für eine Hälfte zu kommen. Anwendung von Gl.\ref{Runden-Gl}führt dann zur Feistel-Chiffre E_{i+1}=(L_{i+1},R_{i+1}), die nach16-maliger Anwendung dann das Zwischenergebnis der DES-Verschlüsselungergibt:E_{16}=\left( L_{16},R_{16}\right) ([fig] \begin{center}\begin{pspicture}(0,0)(7.5,-7)\psset{unit=0.75cm}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](0,0)(3.2,-1)\rput(1.6,-0.7){$\mathbf{R_i}$}\rput(2.6,-0.25){\small32 Bit}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](3.5,0)(9.9,-1)\rput(6.7,-0.7){$\mathbf{\mbox{\bfGrundschlüssel K}}$}\rput(9.15,-0.25){\small 64 Bit}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](5,-3.5)(9.8,-4.5)\rput(7.4,-4.2){$\mathbf{K_i}$}\rput(9.15,-3.75){\small48 Bit}\psline{->}(6.7,-1)(6.7,-2)\psframe(5.7,-2)(7.7,-2.5)\rput(6.7,-2.25){\smallReduktion}\psline{->}(6.7,-2.5)(7.4,-3.5)\psline{->}(1.6,-1)(1.6,-2)\psframe(0.6,-2)(2.6,-2.5)\rput(1.6,-2.25){\smallExpansion}\psline{->}(1.6,-2.5)(2.4,-3.5)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](0.0,-3.5)(4.8,-4.5)\rput(2.4,-4.2){$\mathbf{E(R_i)}$}\rput(4.15,-3.75){\small48 Bit}\psline{->}(2.4,-4.5)(2.4,-5.5)(4.75,-5.5)\psline{->}(7.4,-4.5)(7.4,-5.5)(5.25,-5.5)\pscircle[fillstyle=solid,fillcolor=white](5,-5.5){0.25}\rput(5,-5.5){\Large+}\psline{->}(5,-5.75)(5,-6.25)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](2.6,-6.25)(7.4,-7.25)\rput(5,-6.9){$\mathbf{E(R_i)\oplusK_i}$}\rput(6.8,-6.5){\small 48 Bit}\psline{->}(5,-7.25)(5,-8)\psframe(4,-8)(6,-8.5)\rput(5,-8.25){\smallReduktion}\psline{->}(5,-8.5)(5,-9)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](3.4,-9)(6.6,-10)\rput(5,-9.7){$\mathbf{f(R_i,K_{i+1})}$}\rput(6.,-9.2){\small32 Bit}\end{pspicture}\end{center}\label{DES-Feistel}Bildung der Funktion f\left( R_{i},K_{i+1}\right) ) 6.2.3 Die inverse initiale PermutationAuf das Endergebnis der Feistelchiffre wird jetzt noch abschliessenddie sogenannte inverse initiale Permutation IP^{-1} angewendet, sodass man als endgültiges Ergebnis einer Verschlüsselung nach dem DES-Verfahrenerhält:c=IP^{-1}(R_{16},\, L_{16})=E_{K}(p) Diese inverse initialePermutation besagt lediglich, dass formal p\rightarrow IP(p)\rightarrow IP^{-1}\left( IP(p)\right) wieder zum Originalbit führt p=IP^{-1}\left( IP(p)\right) , d.h. dassdas Bit welches durch IP vom ersten Bit des ersten Bytes auf das letzteBit des fünften Bytes transformiert wurde, wieder auf das erste Bitdes ersten Bites zurücktransformiert wird. Damit läßt sich IP^{-1}leicht bestimmen:IP^{-1}=\left( \begin{array}{cccccccc}24 & 56 & 16 & 48 & 8 & 40 & 0 & 32\\25 & 57 & 17 & 49 & 9 & 41 & 1 & 33\\26 & 58 & 18 & 50 & 10 & 42 & 2 & 34\\27 & 59 & 19 & 51 & 11 & 43 & 3 & 35\\31 & 60 & 20 & 52 & 12 & 44 & 4 & 36\\29 & 61 & 21 & 53 & 13 & 45 & 5 & 37\\30 & 62 & 22 & 54 & 14 & 46 & 6 & 38\\31 & 63 & 23 & 55 & 15 & 47 & 7 & 39\end{array}\right) Die erste Spalte von IP^{-1} entspricht der rückwärts gelesenen fünftenZeile von IP, die zweite Spalte der rückwärts gelesenen ersten Zeile,usw. IP^{-1}(zeile,spalte) bekommt also die Elemente zugewisen, dieauf IP((spalte*5+4)\mod 9;7-zeile) stehen, womit sich die Methode leicht implementieren lässt (Alg.). Anhand der Programmausgabe ergibtsich eindeutig, dass die Anwendung von IP^{-1}\left( IP(p)\right) wieder zum Ausgangswert p führt.6.2.4 Die Expansionsfunktion Die Expansionsfunktion\index{Expansionsfunktion} kann willkürlich gewähltwerden, muss jedoch für einzelne zusammenhängende Chiffrierungs- undDechiffrierungsvorgänge konstant bleiben. Mathematisch formuliertbildet E eine 32-Bitkette auf eine 48-Bitkette ab:E:\quad \{0,1\}^{32}\rightarrow \{0,1\}^{48}Analog zur initialen Permutation kann auch hier mit einer Zuordnungamatrixgearbeitet werden:\left( \begin{array}{cccccccc}31 & 30 & 29 & 28 & 27 & 26 & 25 & 24\\23 & 22 & 21 & 20 & 19 & 18 & 17 & 16\\15 & 14 & 13 & 12 & 11 & 10 & 9 & 8\\7 & 6 & 5 & 4 & 3 & 2 & 1 & 0\end{array}\right) \rightarrow \left( \begin{array}{cccccc}0 & 31 & 30 & 29 & 28 & 27\\28 & 27 & 26 & 25 & 24 & 23\\24 & 23 & 22 & 21 & 20 & 19\\20 & 19 & 18 & 17 & 16 & 15\\16 & 15 & 14 & 13 & 12 & 11\\12 & 11 & 10 & 9 & 8 & 7\\8 & 7 & 6 & 5 & 4 & 3\\4 & 3 & 2 & 1 & 0 & 31\end{array}\right) Ein formaler Zusammenhang lässt sich relativ einfach herstellen, wennman berücksichtigt, dass ab der zweiten Zeile der expandierten Matrixjeweils (Zeilennummer-1)\cdot 2 von der laufenden Platznummer i=1..48abgezogen werden müssen und das ganze Modulo 32 arbeitet. Beziehtman sich wieder auf die übliche mit Null beginnende Zählung, so ergibtsich der in Alg.Angewendet auf das Beispiel nach Gl.\ref{Bsp-Links} ergibt sichR_{0} & = & 11101010\, 11001010\, 00101010\, 11001110\\E\left( R_{0}\right)  & = & 01110101\, 01010110\, 01010100\, 00010101\, 01010110\, 01011101\nonumber  6.2.5 \label{Rundenschl=FCssel}Die Reduktion des GrundschlüsselsDie sogenannten Rundenschlüssel\index{Rundenschlüssel} sind wie derGrundschlüssel prinzipiell frei wählbar, müssen jedoch für einen chiffriertenText bekannt sein, sonst kann keine Dechiffrierung erfolgen. K_{i},\quad i=1,2,...,16seien die einzelnen Rundenschlüssel, die aus dem 64-Bit Grundschlüsselbestimmt werden und v_{i}\quad i=1,2,...,16, sowie PC1 und PC2 folgendeHilfsgrößenv_{i} & = & \left\{ \begin{array}{cc}1 & \textrm{für }i\in \{1,2,9,16\}\\2 & \textrm{andernfalls}\end{array}\right. \nonumber \\PC1:\, \{0,1\}^{64} & \rightarrow  & \{0,1\}^{28}\times \{0,1\}^{28}=C_{0}\times D_{0}\label{vi} \\C_{1} & = & v_{i}\times shift\, links(C_{0})\nonumber \\D_{0} & = & v_{i}\times shift\, links(D_{0})\nonumber \\PC2:\, C_{1}\times D_{1}=\{0,1\}^{28}\times \{0,1\}^{28} & \rightarrow  & \{0,1\}^{48}=K_{i}\nonumber ([fig] \begin{center}\begin{pspicture}(-0.5,0)(5.5,-10.25)\psset{unit=0.8cm}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](0,0)(6.4,-1)\rput(3.2,-0.7){$\mathbf{\mbox{\bfGrundschlüssel K}}$}\rput(5.65,-0.25){\small 64 Bit}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](0.2,-4)(3,-5)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](3.4,-4)(6.2,-5)\psline{->}(3.2,-1)(3.2,-2)\psframe[framearc=1](1,-2)(5.4,-3)\rput(3.2,-2.7){\footnotesize PC1($K_G$)=($C_0,D_0$)}\rput(3.2,-2.25){\footnotesizei=1} \psline{->}(1.6,-3)(1.6,-4)\psline{->}(4.8,-3)(4.8,-4)\rput(1.6,-4.75){\bf$C_0$} \rput(4.8,-4.75){\bf $D_0$}\rput(2.15,-4.25){\small 28 Bit}\rput(5.35,-4.25){\small28 Bit}\psline{->}(1.6,-5)(1.6,-6)\psline{->}(4.8,-5)(4.8,-6)\psframe[framearc=1](0,-6)(3.2,-7)\psframe[framearc=1](3.2,-6)(6.4,-7)\rput(1.6,-6.25){\footnotesize $C_1=v_i$-mal}\rput(4.8,-6.25){\footnotesize $D_1=v_i$-mal}\rput(1.6,-6.7){\footnotesizeshift links($C_0$)} \rput(4.8,-6.7){\footnotesize shift links($D_0$)}\psline{->}(1.6,-7)(1.6,-8)\psline{->}(4.8,-7)(4.8,-8)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](0.2,-8)(3,-9)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](3.4,-8)(6.2,-9)\rput(1.6,-8.75){\bf$C_1$} \rput(4.8,-8.75){\bf $D_1$}\rput(2.15,-8.25){\small 28 Bit}\rput(5.35,-8.25){\small28 Bit}\psline{->}(1.6,-9)(1.6,-10)\psline{->}(4.8,-9)(4.8,-10)\psframe[framearc=1](1,-10)(5.4,-11.5)\rput(3.2,-10.3){\footnotesize$K_i=PC2(C_1,D_1)$}\rput(3.2,-10.75){$C_0=C_1\quad D_0=D_1$}\rput(3.2,-11.3){\footnotesizei=i+1} \psline{->}(5.4,-10.75)(7,-10.75)(7,-5.5)(4.8,-5.5)\psline{->}(1,-10.75)(-.5,-10.75)(-.5,-5.5)(1.6,-5.5)%\psframe[framearc=1](6.6,-6)(9.2,-7)\psframe[framearc=1](-2.8,-6)(-0.2,-7)\pscircle[fillstyle=solid,fillcolor=black](1.6,-5.5){0.05}\pscircle[fillstyle=solid,fillcolor=black](4.8,-5.5){0.05}%\rput(-1.5,-6.5){$C_i=C_{i-1}$}\rput(7.9,-6.5){$D_i=D_{i-1}$}\psline{->}(3.2,-11.5)(3.2,-12.5) \psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](0.8,-12.5)(5.6,-13.5)\rput(3.2,-13.2){$\mathbf{\mbox{\bfRundenschl. $K_i$}}$}\rput(4.8,-12.75){\small 48 Bit}\end{pspicture}\end{center}\label{Rundenschl.-Bild}Bildungdes Rundenschlüssels K_{1}) Die Funktion PC1 ordnet einer Matrix mit 8\times 8 Elementen (64 Bit)zwei Matrizen mit jeweils 4\times 7 Elementen (28 Bit) zu, wobei dieletzte Spalte (8,16,24,32,...) unberücksichtigt bleibt, die beim Schlüsselja den Paritätsbits entspricht (vgl. Gl.\ref{DES-Key}). Die FunktionPC2 ordnet zwei 4\times 7 Matrizen eine 8\times 6 Matrix zuordnet,was nach einem festen Schema erfolgt: \left( \begin{array}{cccccccc}63 & 62 & 61 & 60 & 59 & 58 & 57 & 56\\55 & 54 & 53 & 52 & 51 & 50 & 49 & 48\\47 & 46 & 45 & 44 & 43 & 42 & 41 & 40\\39 & 38 & 37 & 36 & 35 & 34 & 33 & 32\\31 & 30 & 29 & 28 & 27 & 26 & 25 & 24\\23 & 22 & 21 & 20 & 19 & 18 & 17 & 16\\15 & 14 & 13 & 12 & 11 & 10 & 9 & 8\\7 & 6 & 5 & 4 & 3 & 2 & 1 & 0\end{array}\right)  & \rightarrow  & \left\{ \begin{array}{c}\left( \begin{array}{ccccccc}7 & 15 & 23 & 31 & 39 & 47 & 55\\63 & 6 & 14 & 22 & 30 & 38 & 46\\54 & 62 & 5 & 13 & 21 & 29 & 37\\45 & 53 & 61 & 4 & 12 & 20 & 28\end{array}\right) \\\\\left( \begin{array}{ccccccc}1 & 9 & 17 & 25 & 33 & 41 & 49\\57 & 2 & 10 & 18 & 26 & 34 & 42\\50 & 58 & 3 & 11 & 19 & 27 & 35\\43 & 51 & 59 & 36 & 44 & 52 & 60\end{array}\right) \label{Gl-PC1} \end{array}\right. \label{PC1} \\PC1 & \rightarrow  & \left\{ \left( \begin{array}{c}C_{0}\\D_{0}\end{array}\right) \right. =C_{0}\times D_{0}\nonumber Den formalen Ablauf zur Bestimmung des Rundenschlüssels zeigt anschaulichAbb.\ref{Rundenschl.-Bild}. Das Prinzip für C_{0} ist relativ leichtzu erkennen: * beginend mit dem 0. Platz (unten rechts) ergeben die ersten vier  Elemente von D_{0} und C_{0} zusammen die vierte Spalte der 8\times   8 Matrix (60,52,44,36 die ersten Elemente von D_{0} und 28,20,12,4  die ersten von C_{0}; * Nach dem zugeordneten Element Nr. 4 kommt bei C_{0} das 61. Element  der 8*8 Matrix, Das nächste Element ist das um 8 Plätze ``kleinere''  Element, das dann folgende das 16 Plätze kleinere usw. Wird diese  Platznummer negativ, dann wird einfach mit dem 61+1. Element weitergemacht,  bis wieder durch die Verringerung um 8 Plätze eine negative Zahl  erreicht wird und es dann mit dem 61+2. Platz weitergeht usw. bis  die Matrix C_{0} gefüllt ist (Alg.).Für D_{0} verläuft dies analog, wenn beachtet wird, dass nach den erstenvier Elementen mit der Platznummer 59 der 8\times 8 Matrix weitergemachtwird und bei negativer Platznummer der neue ``Startwert'' 59-1 istund der nächste bei ständiger Veringerung um 8 Plätze 59-2 usw.Die Funktion PC2 erstellt aus den beiden ein- oder zweifach links geschobenen([footnote] jenach dem Wert von v_{i} (Gl.\ref{vi}))  Matrizen C_{1}=v_{i}shift\, links\, C_{0};\, \, D_{1}=v_{i}shift\, links\, D_{0}den Rundenschlüssel K_{i}. Die obere Hälfte von K_{i} wird durch Elementevon C_{1} und die untere Hälfte von K_{i} durch Elemente von D_{1}gefüllt. Damit keine Verwechselungen auftreten wurden in Gl.\ref{Gl-PC2}die Platznummern der ``oberen'' Matrix C_{1} nicht mit 0..27 sondernmit 28..55 bezeichnet\left. \begin{array}{c}\left( \begin{array}{ccccccc}55 & 54 & 53 & 52 & 51 & 50 & 49\\48 & 47 & 46 & 45 & 44 & 43 & 42\\41 & 40 & 39 & 38 & 37 & 36 & 35\\34 & 33 & 32 & 31 & 30 & 29 & 28\end{array}\right) \\\\\left( \begin{array}{ccccccc}27 & 26 & 25 & 24 & 23 & 22 & 21\\20 & 19 & 18 & 17 & 16 & 15 & 14\\13 & 12 & 11 & 10 & 9 & 8 & 7\\6 & 5 & 4 & 3 & 2 & 1 & 0\end{array}\right) \end{array}\right\}  & \rightarrow  & \left( \begin{array}{cccccc}42 & 39 & 45 & 32 & 55 & 51\\53 & 28 & 41 & 50 & 35 & 46\\33 & 37 & 44 & 52 & 30 & 48\\40 & 49 & 29 & 36 & 43 & 54\\- & - & - & - & - & -\\15 & 4 & 25 & 19 & 9 & 1\\26 & 16 & 5 & 11 & 23 & 8\\12 & 7 & 17 & 0 & 22 & 3\\10 & 14 & 6 & 20 & 27 & 24\end{array}\right) \label{Gl-PC2} \\C_{1}\times D_{1}=\left. \left( \begin{array}{c}C_{1}\\D_{1}\end{array}\right) \right\}  & \rightarrow  & PC2=K_{i}\nonumber Für die Funktion PC2(C,D) ist kein formaler mathematischer Zusammenhangmöglich, so dass eine normale Zuordnung der einzelnen Elemente innerhalbder Matrizen vorzusehen ist (Alg.).Die Funktionen PC1 und PC2 werden für die einzelnen Rundenschlüsselbenötigt, für die der folgende Algorithmus zugrunde liegt:\label{RundenAlg}1. Das Matrizenpaar \left( C_{0},D_{0}\right) =PC1\left( K_{G}\right) ([footnote] K_{G}entspricht dem gewählten Grundschlüssel (vgl. Gl.\ref{DES-Key}))  liegtdurch den Grundschlüssel K_{G} fest;2. setze i=1;3. C_{1}=\textrm{Shift }v_{i}-\textrm{mal links}\, (C_{0}) und D_{1}=\textrm{Shift}\, v_{i}-\textrm{mal links}\, (D_{0})([footnote] wobeidas Shiften wieder mit Rotation erfolgt (vgl.Fußnote \ref{Fuss-Shift}) ) ,wobei für v_{i} Gl.\ref{vi} zu berücksichtigen ist; 4. K_{i}=PC2\left( C_{1},D_{1}\right) \quad i=1,2,...,16; 5. setze C_{0}=C_{1}, D_{0}=D_{1} und i=i+1; 6. ist i<17 dann gehe zu 3;Einmalig angewendet auf Gl.\ref{DES-Key} ergibt sich:C_{0}=\left( \begin{array}{ccccccc}1 & 1 & 1 & 0 & 1 & 0 & 1\\0 & 1 & 1 & 1 & 1 & 0 & 0\\1 & 0 & 1 & 1 & 0 & 0 & 1\\0 & 1 & 0 & 1 & 0 & 0 & 1\end{array}\right) \qquad D_{0}=\left( \begin{array}{ccccccc}1 & 1 & 0 & 0 & 1 & 1 & 1\\0 & 0 & 0 & 1 & 1 & 0 & 1\\1 & 0 & 0 & 0 & 1 & 0 & 1\\0 & 1 & 0 & 0 & 0 & 1 & 0\end{array}\right) Für den ersten Rundenschlüssel K_{i} folgt mit i=1 und v_{i}=1 (Gl.\ref{vi})folgt weiter mit C_{1} und D_{1}:C_{1} & = & \textrm{Shift links }C_{0}=\left( \begin{array}{ccccccc}1 & 1 & 0 & 1 & 0 & 1 & 0\\1 & 1 & 1 & 1 & 0 & 0 & 1\\0 & 1 & 1 & 0 & 0 & 1 & 0\\1 & 0 & 1 & 0 & 0 & 1 & 1\end{array}\right) \nonumber \\D_{1} & = & \textrm{Shift links D}_{0}=\left( \begin{array}{ccccccc}1 & 0 & 0 & 1 & 1 & 1 & 0\\0 & 0 & 1 & 1 & 0 & 1 & 1\\0 & 0 & 0 & 1 & 0 & 1 & 0\\1 & 0 & 0 & 0 & 1 & 0 & 1\end{array}\right) K_{1}=PC2(C_{1},D_{1})=\left( \begin{array}{cccccc}1 & 1 & 1 & 1 & 1 & 0\\0 & 1 & 0 & 1 & 0 & 1\\0 & 0 & 0 & 1 & 0 & 1\\1 & 0 & 1 & 1 & 0 & 1\\1 & 0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 1 & 1\\0 & 0 & 1 & 1 & 1 & 0\\1 & 1 & 1 & 0 & 1 & 1\end{array}\right) =F9516D8033BB_{16}Es muss nur noch eine Schiebemethode erstellt werden, dann kann dieserAlgorithmus angewendet werden. DIe Klasse  sieht nur ein Schiebenohne Rotation vor, so dass eine eigene Methode erstellt werden muss.Hierbei ist zu berücksichtigen, dass Java die Schieberichtung in bezugauf die Binärentwicklung der BigInteger-Zahl setzt. Hier wurde jedochjede Binärentwicklung bislang als reine Bitkette von links nach rechtsgelesen, so dass auch die Schieberichtung sich darauf beziehen soll.Daher muss im Alg.die Schieberichtung intern umgekehrt werden. Weiterhinerfolgt jedes Schieben grundsätzlich inklusive Rotation. Die Parameterder Methode  sind:* zu schiebende BigInteger-Variable* die Bitlänge der BigInteger-Variable, wird benötigt, weil Java keine  Rotation vorsieht und daher führende Nullen nicht für die Methode   berücksichtigt werden* Anzahl der zu schiebenden Bits* Schieberichtung  * ``->'' für rechts  * ``<-`` für linksIm hier angegeben Beispiel wurde viermal links und anschliessend viermalrechts geschoben, so dass sich bei Verwendung der Rotation die Bitkettevor dem Linksschieben ergeben muss.6.2.6 Reduktion von E(R_{i})\oplus K_{i}Dies entspricht der letzten Stufe in Abb.\ref{DES-Feistel}. Nachdemdie binäre Addition des expandierten Wertes der rechten Hälfte unddes reduzierten Grundschlüssels erfolgt ist, liegt die 48-BitketteE(R_{i})\oplus K_{i} vor, die auf 32 Bit zu reduzieren ist, um Gl.\ref{Runden-Gl}anwenden zu können. Abb.\ref{S-Box} zeigt das Prinzip der Vorgehensweise.E(R_{i})\oplus K_{i} wird in 8 Blöcke zu je 6 Bit unterteilt:E(R_{i})\oplus K_{i}=B_{8}B_{7}B_{6}B_{5}B_{4}B_{3}B_{2}B_{1}([fig] \begin{center}\begin{pspicture}(0,0)(8,-6.5) \rput(4,0){$\mathbf{E(R_i)\oplusK_i}$}\psline{->}(4,-0.25)(4,-1)\psframe(0,-1)(8,-2)\multido{\n=1.0+1.0}{7}{\psline(\n,-1)(\n,-2)}\multido{\n=0.5+1.0,\i=1+1}{8}{\rput(\n,-1.75){B\i}\rput(\n,-1.25){\footnotesize6 Bit}}\pspolygon[linewidth=1pt,fillcolor=lightgray,fillstyle=solid](0,-2.0)(1,-4.0)(7,-4)(8,-2)(0,-2)\psline(1,-2.0)(1.75,-4.0)\psline(2,-2.0)(2.5,-4.0)\psline(3,-2.0)(3.25,-4.0)\psline(4,-2.0)(4,-4.0)\psline(5,-2.0)(4.75,-4.0)\psline(6,-2.0)(5.5,-4.0)\psline(7,-2.0)(6.25,-4.0)\multido{\n=1.0+0.85,\i=1+1}{8}{\rput(\n,-3){\bf S\i}}\rput(4,-2.4){\bf S-Boxen}\psframe(1,-4)(7,-5)\multido{\n=1.75+0.75}{7}{\psline(\n,-4)(\n,-5)}\multido{\n=1.375+0.750,\i=1+1}{8}{\rput(\n,-4.75){C\i}\rput(\n,-4.25){\footnotesize 4 Bit}}\psline{->}(4,-5)(4,-5.5)\pscircle(4,-5.75){0.25}\psline{->}(4,-6)(4,-6.5)\rput(4,-5.75){\bfP}\rput(4,-6.75){$\mathbf{f(R_i,K_{i+1})}$}\end{pspicture}\end{center}\label{S-Box}DieFunktion S-Boxen) Die sogenannten S-Boxen\index{S-Boxen}([footnote] Im Englischen auchals ``primitiv functions'' bezeichnet.)  reduzieren diese einzelnenBlöcke von 6 auf 4 Bit, so dass letztlich die geforderte 32-Bitlängeerreicht wird:S_{i}:\quad \{0,1\}^{6}\rightarrow \{0,1\}^{4},\qquad i=1,2,...,8\label{SBox-Alg}Jede der S-Boxen besteht aus einer Matrix von vierZeilen und 16 Spalten. Für ein gegebenes Wort ``010110'' der Länge6 Bit erfolgt die Umrechnung in eine 4-Bitlänge wie folgt:* die Binärzahl, bestehend aus erstem und letztem Bit entspricht dem  Zeilenindex der i-ten S-Box (z_{1}=00_{2}=0_{10});* die Binärzahl, bestehend aus den anderen Bits (2...5) entspricht  dem Spaltenindex der i-ten S-Box (sp_{1}=1011_{2}=11_{10});* das Element der Matrix an der Stelle (z_{1},sp_{1}) wird binär mit  Nullen auf vier Stellen aufgefüllt: (z_{1},sp_{1})=12_{10}=1100_{2}  hat bereits vier Stellen, so dass S_{1}(010110)=1100 gilt.Die Datei  enthält als laufende Zahlenfolge die Werte der einzelnenS-Boxen. Diese werden einmal von der Hauptmethode eingelesen und stehendann allgemein zur Verfügung (Alg.). Dazu wurde das dreidimensionaleFeld  definiert (vgl. Alg., Zeile 1). Alg. zeigt die Methode , welche die 48 Bit-Zahl  als 32 Bit-Zahl zurückgibt. ([tab]       | Spalte  |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| Zeile | [0]     | [1] | [2] | [3] | [4] | [5] | [6] | [7] | [8] | [9] | [10] | [11] | [12] | [13] | [14] | [15] |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+|       | S_{1}   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [0]   | 14      | 4   | 13  | 1   | 2   | 15  | 11  | 8   | 3   | 10  | 6    | 12   | 5    | 9    | 0    | 7    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [1]   | 0       | 15  | 7   | 4   | 14  | 2   | 13  | 1   | 10  | 6   | 12   | 11   | 9    | 5    | 3    | 8    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [2]   | 4       | 1   | 14  | 8   | 13  | 6   | 2   | 11  | 15  | 12  | 9    | 7    | 3    | 10   | 5    | 0    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [3]   | 15      | 12  | 8   | 2   | 4   | 9   | 1   | 7   | 5   | 11  | 3    | 14   | 10   | 0    | 6    | 13   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+|       | S_{2}   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [0]   | 15      | 1   | 8   | 14  | 6   | 11  | 3   | 4   | 9   | 7   | 2    | 13   | 12   | 0    | 5    | 10   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [1]   | 3       | 13  | 4   | 7   | 15  | 2   | 8   | 14  | 12  | 0   | 1    | 10   | 6    | 9    | 11   | 5    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [2]   | 0       | 14  | 7   | 11  | 10  | 4   | 13  | 1   | 5   | 8   | 12   | 6    | 9    | 3    | 2    | 15   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [3]   | 13      | 8   | 10  | 1   | 3   | 15  | 4   | 2   | 11  | 6   | 7    | 12   | 0    | 5    | 14   | 9    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+|       | S_{3}   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [0]   | 10      | 0   | 9   | 14  | 6   | 3   | 15  | 5   | 1   | 13  | 12   | 7    | 11   | 4    | 2    | 8    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [1]   | 13      | 7   | 0   | 9   | 3   | 4   | 6   | 10  | 2   | 8   | 5    | 14   | 12   | 11   | 15   | 1    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [2]   | 13      | 6   | 4   | 9   | 8   | 15  | 3   | 0   | 11  | 1   | 2    | 12   | 5    | 10   | 14   | 7    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [3]   | 1       | 10  | 13  | 0   | 6   | 9   | 8   | 7   | 4   | 15  | 14   | 3    | 11   | 5    | 2    | 12   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+|       |  S_{4}  |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [0]   | 7       | 13  | 14  | 3   | 0   | 6   | 9   | 10  | 1   | 2   | 8    | 5    | 11   | 12   | 4    | 15   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [1]   | 13      | 8   | 11  | 5   | 6   | 15  | 0   | 3   | 4   | 7   | 2    | 12   | 1    | 10   | 14   | 9    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [2]   | 10      | 6   | 9   | 0   | 12  | 11  | 7   | 13  | 15  | 1   | 3    | 14   | 5    | 2    | 8    | 4    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [3]   | 3       | 15  | 0   | 6   | 10  | 1   | 13  | 8   | 9   | 4   | 5    | 11   | 12   | 7    | 2    | 14   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+|       | S_{5}   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [0]   | 2       | 12  | 4   | 1   | 7   | 10  | 11  | 6   | 8   | 5   | 3    | 15   | 13   | 0    | 14   | 9    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [1]   | 14      | 11  | 2   | 12  | 4   | 7   | 3   | 1   | 5   | 0   | 15   | 10   | 3    | 9    | 8    | 6    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [2]   | 4       | 2   | 1   | 11  | 10  | 13  | 7   | 8   | 15  | 9   | 12   | 5    | 6    | 3    | 0    | 14   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [3]   | 11      | 8   | 12  | 7   | 1   | 14  | 2   | 13  | 6   | 15  | 0    | 9    | 10   | 4    | 5    | 3    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+|       | S_{6}   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [0]   | 12      | 1   | 10  | 15  | 9   | 2   | 6   | 8   | 0   | 13  | 3    | 4    | 14   | 7    | 5    | 11   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [1]   | 10      | 15  | 4   | 2   | 7   | 12  | 9   | 5   | 6   | 1   | 13   | 14   | 0    | 11   | 3    | 8    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [2]   | 9       | 14  | 15  | 5   | 2   | 8   | 12  | 3   | 7   | 0   | 4    | 10   | 1    | 13   | 11   | 6    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [3]   | 4       | 3   | 2   | 12  | 9   | 5   | 15  | 10  | 11  | 14  | 1    | 7    | 6    | 0    | 8    | 13   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+|       | S_{7}   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [0]   | 4       | 11  | 2   | 14  | 15  | 0   | 8   | 13  | 3   | 12  | 9    | 7    | 5    | 10   | 6    | 1    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [1]   | 13      | 0   | 11  | 7   | 4   | 9   | 1   | 10  | 14  | 3   | 5    | 12   | 2    | 15   | 8    | 6    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [2]   | 1       | 4   | 11  | 13  | 12  | 3   | 7   | 14  | 10  | 15  | 6    | 8    | 0    | 5    | 9    | 2    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [3]   | 6       | 11  | 13  | 8   | 1   | 4   | 10  | 7   | 9   | 5   | 0    | 15   | 14   | 2    | 3    | 12   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+|       | S_{8}   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [0]   | 13      | 2   | 8   | 4   | 6   | 15  | 11  | 1   | 10  | 9   | 3    | 14   | 5    | 0    | 12   | 7    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [1]   | 1       | 15  | 13  | 8   | 10  | 3   | 7   | 4   | 12  | 5   | 6    | 11   | 0    | 14   | 9    | 2    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [2]   | 7       | 11  | 4   | 1   | 9   | 12  | 14  | 2   | 0   | 6   | 10   | 13   | 15   | 3    | 5    | 8    |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+| [3]   | 2       | 1   | 14  | 7   | 4   | 10  | 8   | 13  | 15  | 12  | 9    | 0    | 3    | 5    | 6    | 11   |+-------+---------+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+\label{S-Boxen}Die S-Boxen des DES) 6.2.7 Die P-FunktionDie S-Boxen (Abb.\ref{S-Box}) liefern für jede Runde acht Blöcke zuje vier Bit, so dass die geforderte Länge von 32 Bit erreicht wird.Diese wird für jede Runde noch einmal mit der P-Funktion permutiert.P\left( S\left( E(R_{0})\oplus K_{1}\right) \right)  liefert das jeweiligeZwischenergebnis f(R_{0},K_{1}) einer Runde:S\left( E(R_{0})\oplus K_{1}\right) \rightarrow P\left( S\left( E(R_{0})\oplus K_{1}\right) \right) =f(R_{0},K_{1})Die Permutierungsfunktion P(x) ist durch Gleichung \ref{P} gegebenund wieder wie üblich zu interpretieren:([footnote] Das erste Elementder ersten Zeile wandert an die erste Stelle der dritten Zeile, daszweite Element der ersten Zeile an die erste Stelle der fünften Zeileusw.) \left( \begin{array}{cccc}31 & 30 & 29 & 28\\27 & 26 & 25 & 24\\23 & 22 & 21 & 20\\19 & 18 & 17 & 16\\15 & 14 & 13 & 12\\11 & 10 & 9 & 8\\7 & 6 & 5 & 4\\3 & 2 & 1 & 0\end{array}\right) \rightarrow \left( \begin{array}{cccc}16 & 25 & 22 & 11\\3 & 20 & 4 & 15\\31 & 17 & 9 & 6\\27 & 14 & 1 & 12\\30 & 24 & 8 & 18\\0 & 5 & 29 & 23\\13 & 19 & 2 & 26\\10 & 21 & 28 & 7\end{array}\right) Eine mathematische Zuordnung ist nicht möglich, so dass die einzelnenElemente zugeordner werden müssen (Alg.).6.2.8 BeispielIn den vorhergehenden Kapiteln wurden bereits einzelne konkrete Beispielezum Permutieren und zur Schlüsselbildung angegeben. Hier soll jetztnoch einmal die Verschlüsselung eines Originalwortes vollständig durchgeführtwerden. Abb. \ref{Grafik-Runde1} zeigt noch einmal den komplettenformalen Aufbau einer Runde, bzw. ganz speziell der 1. Runde.Gegeben sei das Wort ``Cornelia'', welches in eine Form nach Gl.\ref{IP-Beispiel}zu bringen ist:\left. \begin{array}{cccc}\textrm{C}: & 67_{10}= & 43_{16}= & 01000011_{2}\\\textrm{o}: & 111_{10}= & 6F_{16}= & 01101111_{2}\\\textrm{r}: & 114_{10}= & 72_{16}= & 01110010_{2}\\\textrm{n}: & 110_{10}= & 6E_{16}= & 01101110_{2}\\\textrm{e}: & 101_{10}= & 65_{16}= & 01100101_{2}\\\textrm{l}: & 108_{10}= & 6C_{16}= & 01101100_{2}\\\textrm{i}: & 105_{10}= & 69_{16}= & 01101001_{2}\\\textrm{a}: & 97_{16}= & 61_{16}= & 01100001_{2}\end{array}\right\} p=\left( \begin{array}{cccccccc}0 & 1 & 0 & 0 & 0 & 0 & 1 & 1\\0 & 1 & 1 & 0 & 1 & 1 & 1 & 1\\0 & 1 & 1 & 1 & 0 & 0 & 1 & 0\\0 & 1 & 1 & 0 & 1 & 1 & 1 & 0\\0 & 1 & 1 & 0 & 0 & 1 & 0 & 1\\0 & 1 & 1 & 0 & 1 & 1 & 0 & 0\\0 & 1 & 1 & 0 & 1 & 0 & 0 & 1\\0 & 1 & 1 & 0 & 0 & 0 & 0 & 1\end{array}\right) Die initiale Permutation nach Gl.\ref{IP} liefert IP(p):\left( \begin{array}{cccccccc}0 & 1 & 0 & 0 & 0 & 0 & 1 & 1\\0 & 1 & 1 & 0 & 1 & 1 & 1 & 1\\0 & 1 & 1 & 1 & 0 & 0 & 1 & 0\\0 & 1 & 1 & 0 & 1 & 1 & 1 & 0\\0 & 1 & 1 & 0 & 0 & 1 & 0 & 1\\0 & 1 & 1 & 0 & 1 & 1 & 0 & 0\\0 & 1 & 1 & 0 & 1 & 0 & 0 & 1\\0 & 1 & 1 & 0 & 0 & 0 & 0 & 1\end{array}\right) \rightarrow \left( \begin{array}{cccccccc}1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\0 & 0 & 1 & 1 & 1 & 0 & 1 & 0\\1 & 1 & 0 & 1 & 0 & 0 & 1 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\0 & 1 & 1 & 0 & 1 & 0 & 1 & 0\\0 & 0 & 0 & 0 & 1 & 1 & 1 & 1\end{array}\right) =IP(p)woraus sich die beiden Hälften L_{0} und R_{0} ergeben:L_{0} & = & 11111111000001000011101011010011\\R_{0} & = & 00000000111111100110101000001111\nonumber ([fig] \begin{center}\begin{pspicture}(-9,0)(6.5,-21)\psset{unit=0.65cm}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](1,0)(7.4,-1)\rput(4.2,-0.7){$\mathbf{\mbox{\bfGrundschlüssel K}}$}\rput(6.65,-0.25){\scriptsize 64 Bit}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](1.2,-4)(4,-5)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](4.4,-4)(7.2,-5)\psline{->}(4.2,-1)(4.2,-2)\psframe[framearc=1](2,-2)(6.4,-3)\rput(4.2,-2.5){\scriptsizePC1($K_G$)=($C_0,D_0$)}%\rput(3.2,-2.25){\scriptsize i=1} \psline{->}(2.6,-3)(2.6,-4)\psline{->}(5.8,-3)(5.8,-4)\rput(2.6,-4.75){\bf$C_0$} \rput(5.8,-4.75){\bf $D_0$}\rput(3.15,-4.25){\scriptsize 28 Bit}\rput(6.35,-4.25){\scriptsize28 Bit}\psline{->}(2.6,-5)(2.6,-6)\psline{->}(5.8,-5)(5.8,-6)\psframe[framearc=1](1,-6)(4.2,-7)\psframe[framearc=1](4.2,-6)(7.4,-7)\rput(2.6,-6.25){\scriptsize $C_1=$}\rput(5.8,-6.25){\scriptsize $D_1=$}\rput(2.6,-6.7){\scriptsize shiftlinks($C_0$)} \rput(5.8,-6.7){\scriptsize shift links($D_0$)}\psline{->}(2.6,-7)(2.6,-8)\psline{->}(5.8,-7)(5.8,-8)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](1.2,-8)(4,-9)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](4.4,-8)(7.2,-9)\rput(2.6,-8.75){\bf$C_1$} \rput(5.8,-8.75){\bf $D_1$}\rput(3.15,-8.25){\scriptsize 28 Bit}\rput(6.35,-8.25){\scriptsize28 Bit}\psline{->}(2.6,-9)(2.6,-11.5)\psline{->}(5.8,-9)(5.8,-11.5)\psframe[framearc=1](1.75,-11.5)(6.65,-12.5)\rput(4.2,-11.8){\scriptsize$K_1=PC2(C_1,D_1)$}\rput(4.2,-12.2){\scriptsize $C_0=C_1; D_0=D_1$}%\rput(4.2,-11.3){\scriptsizei=i+1} %\psline{->}(5.65,-10.5)(6.4,-10.5)(6.4,-14.5)(4.8,-14.5)(4.8,-15.5)\psline{->}(1,-10.75)(0,-10.75)(0,-14.5)(1.6,-14.5)(1.6,-15.5)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-3.8,-11.5)(1,-12.5)\psline{->}(1.8,-12)(1,-12)\rput(-1.4,-12.2){\bfRundenschl.$\mathbf{K_1}$}\rput(0.3,-11.75){\scriptsize 48 Bit}\psline{->}(-3.8,-12)(-4.75,-12)%\psline[linestyle=dotted]{->}(2.6,-12.5)(2.6,-15)\psline[linestyle=dotted]{->}(5.8,-12.5)(5.8,-15)\psframe[framearc=1](1,-15)(4.2,-16)\psframe[framearc=1](4.2,-15)(7.4,-16)\rput(2.6,-15.25){\scriptsize $C_1=$}\rput(5.8,-15.25){\scriptsize$D_1=$}\rput(2.6,-15.75){\scriptsize shift links($C_0$)}\rput(5.8,-15.75){\scriptsizeshift links($D_0$)}\psline[linestyle=dotted]{->}(2.6,-16)(2.6,-17)\psline[linestyle=dotted]{->}(5.8,-16)(5.8,-17)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](1.2,-17)(4,-18)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](4.4,-17)(7.2,-18)\rput(2.6,-17.75){\bf$C_1$} \rput(5.8,-17.75){\bf $D_1$}\rput(3.15,-17.25){\scriptsize 28 Bit}\rput(6.35,-17.25){\scriptsize28 Bit}\psline[linestyle=dotted]{->}(2.6,-18)(2.6,-23.5)\psline[linestyle=dotted]{->}(5.8,-18)(5.8,-23.5)\psframe[framearc=1](1.75,-23.5)(6.65,-24.5)\rput(4.2,-23.8){\scriptsize$K_2=PC2(C_1,D_1)$}\rput(4.2,-24.2){\scriptsize $C_0=C_1; D_0=D_1$}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-3.8,-23.5)(1,-24.5)\psline[linestyle=dotted]{->}(1.8,-24)(1,-24)\rput(-1.4,-24.2){\bfRundenschl.$\mathbf{K_2}$}\rput(0.3,-23.75){\scriptsize 48 Bit}\psline[linestyle=dotted]{->}(-3.8,-24)(-4.75,-24)\psline[linestyle=dotted]{->}(2.6,-24.5)(2.6,-27)\psline[linestyle=dotted]{->}(5.8,-24.5)(5.8,-27)\psframe[framearc=1](1,-27)(4.2,-28)\psframe[framearc=1](4.2,-27)(7.4,-28)\rput(2.6,-27.25){\scriptsize $C_1=2\times$}\rput(5.8,-27.25){\scriptsize$D_1=2\times$}\rput(2.6,-27.75){\scriptsize shift links($C_0$)}\rput(5.8,-27.75){\scriptsizeshift links($D_0$)}\psline[linestyle=dotted]{->}(2.6,-28)(2.6,-29)\psline[linestyle=dotted]{->}(5.8,-28)(5.8,-29)%%Feistel-Chiffre%\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-10.7,0)(-4.3,-1)\psline{->}(-7.5,-1)(-7.5,-2)\rput(-7.5,-0.7){\bfKlartext $p$}\rput(-5,-0.2){\scriptsize 64 Bit}\psframe[framearc=1](-10,-2)(-5,-3)\rput(-7.5,-2.5){\scriptsizeInitiale Permutierung}\psline{->}(-7.5,-3)(-7.5,-4)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-10.7,-4)(-4.3,-5)\psline{->}(-10,-5)(-10,-6)\psline{->}(-5,-5)(-5,-6)\rput(-7.5,-4.7){\mathbf{$IP(p)$}}\rput(-5,-4.2){\scriptsize64 Bit}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-11.6,-6)(-8.4,-7)\rput(-10,-6.7){$L_0$}\rput(-9,-6.2){\scriptsize32 Bit}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-6.6,-6)(-3.4,-7)\rput(-5,-6.7){$R_0$}\rput(-4,-6.2){\scriptsize32 Bit}\psline{->}(-5,-7)(-5,-8)\psframe[framearc=1](-7,-8)(-3,-9)\rput(-5,-8.5){ExpansionE}\psline{->}(-5,-9)(-5,-10)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-7.4,-10)(-2.6,-11)\rput(-5,-10.7){$\mathbf{E(R_0)}$}\rput(-3.2,-10.25){\scriptsize48 Bit}\psline{->}(-5,-11)(-5,-11.8)\pscircle[fillstyle=solid,fillcolor=white](-5,-12){0.25}\rput(-5,-12){\Large+}\psline{->}(-5,-12.2)(-5,-13)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-7.4,-13)(-2.6,-14)\rput(-5,-13.7){$\mathbf{E(R_0)\oplusK_1}$}\rput(-3.2,-13.25){\scriptsize 48 Bit}\psline{->}(-5,-14)(-5,-14.5)\psframe[framearc=1](-7,-14.5)(-3,-15.5)\rput(-5,-15){i-teSBox}\psline{->}(-5,-15.5)(-5,-16)\psframe[framearc=1](-7,-16)(-3,-17)\rput(-5,-16.5){P-Funktion}\psline{->}(-5,-17)(-5,-17.5)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-6.6,-17.5)(-3.4,-18.5)\rput(-5,-18.2){$\mathbf{f(R_0,K_1)}$}\rput(-4,-17.7){\scriptsize32 Bit}\psline{->}(-5,-18.5)(-5,-19.05)\pscircle[fillstyle=solid,fillcolor=white](-5,-19.25){0.25}\rput(-5,-19.25){\Large+}\psline{->}(-5,-19.45)(-5,-20)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-6.6,-20)(-3.4,-21)\rput(-5,-20.7){$\mathbf{R_1}$}\rput(-4,-20.2){\scriptsize32 Bit}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-11.6,-20)(-8.4,-21)\rput(-10,-20.7){$\mathbf{L_1}$}\rput(-9,-20.2){\scriptsize32 Bit}\psframe[linewidth=1pt,linestyle=dotted,framearc=0.1](-12,-21.25)(-2,-7.75)\pscircle[fillstyle=solid,fillcolor=black](-5,-7.5){0.05}\psline{->}(-5,-7.5)(-8,-7.5)(-10,-9)(-10,-20)\psline{->}(-10,-7)(-10,-7.5)(-8,-9)(-8,-19.25)(-5.2,-19.25)\psline[linestyle=dotted]{->}(-10,-21)(-10,-21.5)(-8,-23)(-8,-23.5)\psline[linestyle=dotted]{->}(-5,-21)(-5,-22)\psframe[framearc=1](-7,-22)(-3,-23)\rput(-5,-22.5){ExpansionE}\psline[linestyle=dotted]{->}(-5,-23)(-5,-23.5)\pscircle[fillstyle=solid,fillcolor=black](-5,-21.5){0.05}\psline[linestyle=dotted]{->}(-5,-21.5)(-8,-21.5)(-10,-23)(-10,-23.5)\psline[linestyle=dotted](-10,-24)(-10,-24.5)\psline[linestyle=dotted](-5,-24)(-5,-24.5)\psline[linestyle=dotted]{->}(-8,-24)(-8,-25)(-5.25,-25)%\psline[linestyle=dotted]{->}(-10,-25)(-10,-26)\psline[linestyle=dotted](-5,-25.2)(-5,-26)\pscircle[fillstyle=solid,fillcolor=white](-5,-25){0.25}\rput(-5,-25){\Large+}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-6.6,-26)(-3.4,-27)\rput(-5,-26.7){$\mathbf{R_{16}}$}\rput(-4,-26.2){\scriptsize32 Bit}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-11.6,-26)(-8.4,-27)\rput(-10,-26.7){$\mathbf{L_{16}}$}\rput(-9,-26.2){\scriptsize32 Bit}\psline{->}(-10,-27)(-10,-28)\psline{->}(-5,-27)(-5,-28)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-10.7,-28)(-4.3,-29)\psline{->}(-7.5,-29)(-7.5,-30)\rput(-7.5,-28.7){$\mathbf{E_{16}(L_0,R_0)}$}\rput(-5,-28.2){\scriptsize64 Bit}\psframe[framearc=1](-10,-30)(-5,-31)\rput(-7.5,-30.5){\scriptsize Inverse Permutierung}\psline{->}(-7.5,-31)(-7.5,-32)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](-10.7,-32)(-4.3,-33)\rput(-7.5,-32.7){\bfChiffrierter Text}\rput(-5,-32.2){\scriptsize 64 Bit}\end{pspicture}\end{center}\label{Grafik-Runde1}Diekomplette 1. Runde im DES) Die beiden Matrizen C_{0} und D_{0} liegen bereits durch denGrundschlüsselfest: (C_{0};D_{0})=PC1(K). Für den ersten Rundenschlüssel K_{1} folgtnach S.\pageref{RundenAlg}: * mit dem Rundenindex i=1 ergibt sich für v_{i}=1. Die beiden Matrizen  C_{1} und D_{1} entstehen also durch einen einfachen Links-Shift  mit Rotation: auf die jetzt mit dem bereits durch Gl.\ref{DES-Key} gegebenen Grundschlüsseldie Beziehung nach Gl.\ref{Runden-Gl} anzuwenden ist Damit ergibtsich nach Kap.\ref{Rundenschl=FCssel} der erste Rundenschlüssel K_{1},der direkt aus Gl.\ref{K1} übernommen werden kann, da bei diesem Besipielderselbe Grundschlüssel nach Gl.\ref{DES-Key} vorliegt und durch E(R_{0})durch Anwendung der Gl.\ref{Expander} sowie das Ergebnis der binärenAddition ohne Übertrag E(R_{0})\oplus K_{1}:K_{1} & = & 111110010101000101101101100000000011001110111011\nonumber \\E(R_{0}) & = & 100000000001011111111100001101010100000001010000\\E(R_{0})\oplus K_{1} & = & 011110010100011010010001101101010111001111101011\nonumber Anwendung der S-Boxen auf E(R_{0})\oplus K_{1} führt zu S\left( E(R_{0})\oplus K_{1}\right) mit einer 32 Bitlänge\begin{array}{lllll}011110 & S_{1}(00,1111)\rightarrow S_{1}(0,15) & =7_{10} & = & 0111_{2}\\010100 & S_{2}(00,1010)\rightarrow S_{2}(0,10) & =2_{10} & = & 0010_{2}\\011010 & S_{3}(00,1101)\rightarrow S_{3}(0,13) & =4_{10} & = & 0100_{2}\\010001 & S_{4}(01,1000)\rightarrow S_{4}(1,8) & =4_{10} & = & 0100_{2}\\101101 & S_{5}(11,0110)\rightarrow S_{5}(3,6) & =2_{10} & = & 0010_{2}\\010111 & S_{6}(01,1011)\rightarrow S_{6}(1,11) & =14_{10} & = & 1110_{2}\\001111 & S_{7}(01,0111)\rightarrow S_{7}(1,7) & =10_{10} & = & 1010_{2}\\101011 & S_{8}(11,0101)\rightarrow S_{8}(3,5) & =10_{10} & = & 1010_{2}\end{array}Für f(R_{0},K_{1})=P\left( S\left( E(R_{0})\oplus K_{1}\right) \right) folgt jetzt durch Anwendung der Funktion P:\left( \begin{array}{cccc}0 & 1 & 1 & 1\\0 & 0 & 1 & 0\\0 & 1 & 0 & 0\\0 & 1 & 0 & 0\\0 & 0 & 1 & 0\\1 & 1 & 1 & 0\\1 & 0 & 1 & 0\\1 & 0 & 1 & 0\end{array}\right) \rightarrow \left( \begin{array}{cccc}0 & 1 & 1 & 1\\1 & 0 & 0 & 0\\0 & 0 & 1 & 0\\0 & 0 & 1 & 0\\1 & 0 & 0 & 1\\0 & 1 & 1 & 0\\1 & 0 & 0 & 0\\1 & 0 & 1 & 1\end{array}\right) =f(R_{0},K_{1}) Jetzt kann mit den letzten Zwischenrechnungen das Ergebnis der erstenRunde angegeben werdenE_{1}=(L_{1},R_{1})=(R_{0},\, L_{0}\oplus f(R_{0},K_{1})L_{0} & = & 11111111000001000011101011010011\nonumber \\f(R_{0},K_{1}) & = & 01111000001000101001011010001011\\L_{0}\oplus f(R_{0},K_{1}) & = & 10000111001001101010110001011000\nonumber \\E_{1} & = & (00000000111111100110101000001111,\nonumber \\ &  & 10000111001001101010110001011000)\nonumber In der ersten Runde wurde ``Cornelia'' in die hexadezimale Folge ``00FE6A0F8726AC58''verschlüsselt. Alle weiteren sieben Runden sind nun analog anzuwendenund sind in der folgenden Ausgabe zu setzen. Alg. zeigt den wesentlichenTeil des Algorithmus der Klasse DES zugrundeliegt. Im Anhang befindetsich das komplette Listing einschließlich der einzelnen Methoden.Der Schlüssel wird normalerweise grundsätzlich über eine Zufallsfunktionbestimmt. Um die Zwischenergebnisse reproduzierbar zu machen, wurdejedesmal derselbe Schlüssel verwendet. Statt Zeile 238 in Alg. iststandardmäßig Zeile 239 anzuwenden.6.3 EntschlüsselungAnalog zur Feistel-Chiffre erfolgt die Entschlüsselung, indem die SchlüsselfolgeK_{i} umgekehrt angewendet wird, der gesamte Algorithmus dagegen erhaltenbleibt! Statt der Reihenfolge K_{1},...,K_{16} ist jetzt K_{16},...,K_{1}anzuwenden. Wie Abb.\ref{Grafik-Runde1} zeigt, ist die Berechnungder Rundenschlüssel unabhängig von dem Ablauf des Algorithmus, d.h.sämtliche Schlüssel können vorab berechnet berechnet werden. Dazuwurde die Methode  geschrieben, die wie Alg. zeigt, sehr einfach aufgebautist.Die Anwendung des kompletten Entschlüsselungsvorgang zeigt die folgendeBildschirmausgabe, die den im vorigen Kapitel beschriebenen Verschlüsselungsvorgangwieder rückgängig macht. Das gesamte Programm braucht hier nicht angegebenzu werden, da im prinzip lediglich die -Schleife mit  arbeitet (Zeile32 in Alg.), so dass Alg. nur diese Schleife beschreibt.6.4 Sicherheit\index{Sicherheit}Der Entwicklung von DES gingen lange Forschungen voraus, die von ebensolangen gefolgt wurden, die sich mit der Möglichkeit des Angriffs aufeinen nach DES verschlüsselten Text beschäftigten. Aufgrund der enormentechnischen Entwicklung im Bereich der Hardware reduziert sich einAngriff auf das einfache Durchlaufen des gesamten Schlüsselraumes\index{Schlüsselraum}.Schaltet man dazu mehrere Rechner parallel, so benötigt man heutekaum einen Tag um jeden Text, der nach DES verschlüsselt wurde, zuentschlüsseln. Allerdings bedarf es dazu einer ganz erheblichen Rechnerperformance.Gl.\ref{DES-AllgGl} beschreibt mathematisch den Vorgang der DES-Verschlüsselung,der einer Einfach-Ver\-schlüsselung entspricht. Die Sicherheit kannmassiv erhöht werden, wenn auf eine Mehrfachverschlüsselung\index{Mehrfachverschlüsselung}übergegangen wird, d.h. dass der verschlüsselte Text c=E_{K}(p) alsneuer Klartext aufgefasst wird und erneut nach DES verschlüsselt wird,wobei zwingend ein anderer Schlüssel zu verwenden ist: c=E^{*}_{K2}\left( E_{K1}(p)\right) .Üblich ist zur Zeit die Dreifachverschlüsselung\index{Dreifachverschlüsselung}(triple encryption), die nach dem sogenannten EDE-Prinzip\index{EDE-Prinzip}([footnote] E:Encryption (Verschlüsseln); D: Decryption (Entschlüsseln)Es existieren auch noch andere Möglichkeiten, z.B. EEE, DED usw.\cite{RSA:1998}) arbeitet:c=E_{K3}\left( D_{K2}\left( E_{K1}(p)\right) \right) Dies bedeutet, dass der Originaltext p mit dem Schlüssel K1 wie obenbeschrieben verschlüsselt wird, danach wird mit dem Schlüssel K2 dermit K1 verschlüsselte Text entschlüsselt, was wegen der verschiedenenSchlüssel letztlich zu einer weiteren Verschlüsselung führt und anschliessenderfolgt mit dem Schlüssel K3 wieder eine Verschlüsselung nach bekanntemMuster. Grundsätzlich sind alle DES-Schlüssel gleichberechtigt, dennoch gibtes vier sogenannte weak keys\index{weak keys}, die einen feindlichenEntschlüsselungsvorgang vereinfachen. Wie man Abb.\ref{Grafik-Runde1}entnehmen kann, finden zur Bestimmung der Rundenschlüssel lediglichPermutierungen\index{Permutierung} bzw. Schiebungen mit Rotation statt.Dies bedeudet, dass einzelne Bits ``auf Wanderschaft'' gehen, abernicht grundsätzlich verändert werden! Gilt für C_{0}=000...000 undD_{0}=000...000, so würden alle Rundenschlüssel denselbenWert annehmenK_{i}=0000...0000;\, i=1,2,..,16, denn mit der Bestimmung von C_{0}und D_{0} finden nur noch die erwähnten PErmuiterungen und Schiebungenstatt. Zu klären ist jedoch, ob es überhaupt gültige Schlüssel gibt,die zu solchen C_{0} und D_{0} führen können, denn DES-Schlüssel müssenwie Gl.\ref{DES-Key} zeigt, bestimmte Voraussetzungen bezüglich dereinzelnen Bytes erfüllen. Betrachtet man Gl.\ref{PC1}, so fällt auf,dass die sogenannten Paritätsbits, die dafür sorgen, dass die Summeder gesetzten Bits in einem Byte ungeradzahlig ist, nicht in C_{0}und D_{0} erscheinen, womit man sofort mit \left( \begin{array}{cccccccc}0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\end{array}\right) =0101010101010101_{16}einengültigen Schlüssel erhält, der zum beschriebenen Verhalten für C_{0}und D_{0} führt. Angewendet auf das angegeben Bespiel ergibt sichdamit:An der Verschlüsselung des Originalwortes ist nicht zu erkennen, dassein ``schwacher'' Schlüssel zugrundegelegt wurde, insofern ist bereitsder Begriff des ``schwachen'' Schlüssels ``schwach'' ... Es ist leichtnachzuvollziehen, dass das Inverse von Gl.\ref{weakKey} ebenfallsein gültiger ``schwacher'' Schlüssel ist:\left( \begin{array}{cccccccc}1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\end{array}\right) =FEFEFEFEFEFEFEFE_{16}Zusätzlichzu diesen beiden wird auch die Kombination als ``schwach'' angesehen,denn auch hier verändern sich die einzelnen Rundenschlüssel nicht.Kombination bedeutet, dass C_{0}=000...000 und D_{0}=111...111 gilt(bzw. umgekehrt). Man kann leicht mit Gl.\ref{PC1} zeigen, dass dazuder folgende Schlüssel gehört (bzw. der dazu inverse):\left( \begin{array}{cccccccc}0 & 0 & 0 & 1 & 1 & 1 & 1 & 1\\0 & 0 & 0 & 1 & 1 & 1 & 1 & 1\\0 & 0 & 0 & 1 & 1 & 1 & 1 & 1\\0 & 0 & 0 & 1 & 1 & 1 & 1 & 1\\0 & 0 & 0 & 0 & 1 & 1 & 1 & 0\\0 & 0 & 0 & 0 & 1 & 1 & 1 & 0\\0 & 0 & 0 & 0 & 1 & 1 & 1 & 0\\0 & 0 & 0 & 0 & 1 & 1 & 1 & 0\end{array}\right) =1F1F1F1F0E0E0E0E_{16}Da DES schon einen ziemlichen Aufwand bei der Verschlüsselung treibt,sollten diese ``schwachen'' Schlüssel grundsätzlich nicht verwendetwerden:S_{1} & = & 0000000100000001000000010000000100000001000000010000000100000001\nonumber \\S_{2} & = & 1111111011111110111111101111111011111110111111101111111011111110\nonumber \\S_{3} & = & 0001111100011111000111110001111100001110000011100000111000001110\\S_{4} & = & 1110000011100000111000001110000011110001111100011111000111110001\nonumber 6.5 Die ZukunftSeit 1998 ist es den einzelnen Ministerien der US-Regierung nicht mehrerlaubt das Einfach-DES zu verwenden. Bis neue Verfahren praktikabelsind (z.B. AES\index{AES}) ist ausnahmslos Dreifach-DES zu verwenden.\cite[S.71]{RSA:1998}Das wesentliche Problem ist und bleibt bei allen symmetrischen Verfahrendie sichere Übermittlung des Schlüssels an den Empfänger der verschlüsseltenInformationen.6.6 Zusammenfassung der mathematischen BeziehungenAusgegangen wird von einem Originalwort p, dem sogenannten Klartext\index{Klartext},dessen Bits wie folgt angeordnet sind: p=\left( \begin{array}{cccccccc}63 & 62 & 61 & 60 & 59 & 58 & 57 & 56\\55 & 54 & 53 & 52 & 51 & 50 & 49 & 48\\47 & 46 & 45 & 44 & 43 & 42 & 41 & 40\\39 & 38 & 37 & 36 & 35 & 34 & 33 & 32\\31 & 30 & 29 & 28 & 27 & 26 & 25 & 24\\23 & 22 & 21 & 20 & 19 & 18 & 17 & 16\\15 & 14 & 13 & 12 & 11 & 10 & 9 & 8\\7 & 6 & 5 & 4 & 3 & 2 & 1 & 0\end{array}\right) Eine (initiale) Permutation\index{Permutation} verschiebt die Bits:IP(p)=\left( \begin{array}{cccccccc}6 & 14 & 22 & 30 & 38 & 46 & 54 & 62\\4 & 12 & 20 & 28 & 36 & 44 & 52 & 60\\2 & 10 & 18 & 26 & 34 & 42 & 50 & 58\\0 & 8 & 16 & 24 & 32 & 40 & 48 & 56\\7 & 15 & 23 & 31 & 39 & 47 & 55 & 63\\5 & 13 & 21 & 29 & 37 & 45 & 53 & 61\\3 & 11 & 19 & 27 & 35 & 43 & 51 & 59\\1 & 9 & 17 & 25 & 33 & 41 & 49 & 57\end{array}\right) Eine dazu inverse (initiale) Permutation führt wieder zum OriginalwortIP^{-1}\left( IP(p)\right) =p. Bezogen auf die Anordnung der Bitsdes Klartextes gilt:IP^{-1}\left( p\right) =\left( \begin{array}{cccccccc}24 & 56 & 16 & 48 & 8 & 40 & 0 & 32\\25 & 57 & 17 & 49 & 9 & 41 & 1 & 33\\26 & 58 & 18 & 50 & 10 & 42 & 2 & 34\\27 & 59 & 19 & 51 & 11 & 43 & 3 & 35\\31 & 60 & 20 & 52 & 12 & 44 & 4 & 36\\29 & 61 & 21 & 53 & 13 & 45 & 5 & 37\\30 & 62 & 22 & 54 & 14 & 46 & 6 & 38\\31 & 63 & 23 & 55 & 15 & 47 & 7 & 39\end{array}\right) Eine beliebige Bitkette der Länge 64 Bit wird in eine linke L_{0}([footnote] entspricht den oberen 32 Bit, muss also bei einer Addition mit  um32 Stellen nach links geschoben werden (ohne Rotation!))  und rechteHälfte R_{0} unterteiltp & = & \textrm{shiftLeft}\left( L_{0},32\right) +R_{0}=L_{0}R_{0}\nonumber \\L_{0} & = & 11110010100100100011011001101100\\R_{0} & = & 11101010110010100010101011001110\nonumber Eine Runde der Feistel-Chiffre, wobei i=0,1,...,15 gilt:E_{i+1}=\left( L_{i+1},R_{i+1}\right) =\left( R_{i},L_{i}\oplus f\left( R_{i},K_{i+1}\right) \right) Das ``Endergebnis'' einer DES-Verschlüsselung entspricht der 16. Rundeder Feistelchiffre:c=IP^{-1}(R_{16},\, L_{16})=E_{K}(p) Die Expansionsfunktion\index{Expansionsfunktion}bildet E eine 32-Bitkette auf eine 48-Bitkette ab:E:\quad \{0,1\}^{32}\rightarrow \{0,1\}^{48}Die Zuordnungsmatrix für x\rightarrow E(x):\left( \begin{array}{cccccccc}31 & 30 & 29 & 28 & 27 & 26 & 25 & 24\\23 & 22 & 21 & 20 & 19 & 18 & 17 & 16\\15 & 14 & 13 & 12 & 11 & 10 & 9 & 8\\7 & 6 & 5 & 4 & 3 & 2 & 1 & 0\end{array}\right) \rightarrow \left( \begin{array}{cccccc}0 & 31 & 30 & 29 & 28 & 27\\28 & 27 & 26 & 25 & 24 & 23\\24 & 23 & 22 & 21 & 20 & 19\\20 & 19 & 18 & 17 & 16 & 15\\16 & 15 & 14 & 13 & 12 & 11\\12 & 11 & 10 & 9 & 8 & 7\\8 & 7 & 6 & 5 & 4 & 3\\4 & 3 & 2 & 1 & 0 & 31\end{array}\right) Die Rundenschlüssel\index{Rundenschlüssel} K_{i},\quad i=1,2,...,16werden über die Hilfsgrößen v_{i}\quad i=1,2,...,16, sowie PC1 undPC2 bestimmt:v_{i} & = & \left\{ \begin{array}{cc}1 & \textrm{für }i\in \{1,2,9,16\}\\2 & \textrm{andernfalls}\end{array}\right. \nonumber \\PC1:\, \{0,1\}^{64} & \rightarrow  & \{0,1\}^{28}\times \{0,1\}^{28}=C\times D\\PC2:\, C\times D=\{0,1\}^{28}\times \{0,1\}^{28} & \rightarrow  & \{0,1\}^{48}\nonumber \left( \begin{array}{cccccccc}63 & 62 & 61 & 60 & 59 & 58 & 57 & 56\\55 & 54 & 53 & 52 & 51 & 50 & 49 & 48\\47 & 46 & 45 & 44 & 43 & 42 & 41 & 40\\39 & 38 & 37 & 36 & 35 & 34 & 33 & 32\\31 & 30 & 29 & 28 & 27 & 26 & 25 & 24\\23 & 22 & 21 & 20 & 19 & 18 & 17 & 16\\15 & 14 & 13 & 12 & 11 & 10 & 9 & 8\\7 & 6 & 5 & 4 & 3 & 2 & 1 & 0\end{array}\right)  & \rightarrow  & \left\{ \begin{array}{c}\left( \begin{array}{ccccccc}7 & 15 & 23 & 31 & 39 & 47 & 55\\63 & 6 & 14 & 22 & 30 & 38 & 46\\54 & 62 & 5 & 13 & 21 & 29 & 37\\45 & 53 & 61 & 4 & 12 & 20 & 28\end{array}\right) \\\\\left( \begin{array}{ccccccc}1 & 9 & 17 & 25 & 33 & 41 & 49\\57 & 2 & 10 & 18 & 26 & 34 & 42\\50 & 58 & 3 & 11 & 19 & 27 & 35\\43 & 51 & 59 & 36 & 44 & 52 & 60\end{array}\right) \end{array}\right. \\PC1 & \rightarrow  & \left\{ \begin{array}{c}C\\D\end{array}\right. =C\times D\nonumber \left. \begin{array}{c}\left( \begin{array}{ccccccc}55 & 54 & 53 & 52 & 51 & 50 & 49\\48 & 47 & 46 & 45 & 44 & 43 & 42\\41 & 40 & 39 & 38 & 37 & 36 & 35\\34 & 33 & 32 & 31 & 30 & 29 & 28\end{array}\right) \\\\\left( \begin{array}{ccccccc}27 & 26 & 25 & 24 & 23 & 22 & 21\\20 & 19 & 18 & 17 & 16 & 15 & 14\\13 & 12 & 11 & 10 & 9 & 8 & 7\\6 & 5 & 4 & 3 & 2 & 1 & 0\end{array}\right) \end{array}\right\}  & \rightarrow  & \left( \begin{array}{cccccc}42 & 39 & 45 & 32 & 55 & 51\\53 & 28 & 41 & 50 & 35 & 46\\33 & 37 & 44 & 52 & 30 & 48\\40 & 49 & 29 & 36 & 43 & 54\\15 & 4 & 25 & 19 & 9 & 1\\26 & 16 & 5 & 11 & 23 & 8\\12 & 7 & 17 & 0 & 22 & 3\\10 & 14 & 6 & 20 & 27 & 24\end{array}\right) \\C\times D=\left. \begin{array}{c}C\\D\end{array}\right\}  & \rightarrow  & PC2\nonumber Der Algorithmus für die Rundenschlüssel (vgl. S.\pageref{RundenAlg}):1. Das Matrizenpaar \left( C_{0},D_{0}\right) =PC1\left( K_{G}\right)   liegt durch den Grundschlüssel K_{G} fest;2. C_{i}=\textrm{Shift }v_{i}-\textrm{mal links}\, (C_{i-1}) und D_{i}=\textrm{Shift}\, v_{i}-\textrm{mal links}\, (D_{i-1}),  wobei für v_{i} Gl.\ref{vi} zu berücksichtigen ist; 3. K_{i}=PC2\left( C_{i},D_{i}\right) \quad i=1,2,...,16 Die S-Boxen\index{S-Box} bilden eine 6 Bitkette auf eine 4-Bitketteab (der Algorithmus ist auf S.\pageref{SBox-Alg} beschrieben): S_{i}:\quad \{0,1\}^{6}\rightarrow \{0,1\}^{4},\qquad i=1,2,...,8Die P-Funktion\index{P-Funktion}:S\left( E(R_{0})\oplus K_{1}\right) \rightarrow P\left( S\left( E(R_{0})\oplus K_{1}\right) \right) =f(R_{0},K_{1})Die Zuordnungsvorschrift der Permutierungsfunktion P(x) :\left( \begin{array}{cccc}31 & 30 & 29 & 28\\27 & 26 & 25 & 24\\23 & 22 & 21 & 20\\19 & 18 & 17 & 16\\15 & 14 & 13 & 12\\11 & 10 & 9 & 8\\7 & 6 & 5 & 4\\3 & 2 & 1 & 0\end{array}\right) \rightarrow \left( \begin{array}{cccc}16 & 25 & 22 & 11\\3 & 20 & 4 & 15\\31 & 17 & 9 & 6\\27 & 14 & 1 & 12\\30 & 24 & 8 & 18\\0 & 5 & 29 & 23\\13 & 19 & 2 & 26\\10 & 21 & 28 & 7\end{array}\right) 7 \label{Kap-RSA}RSA\index{RSA}-Kodierung([footnote] siehe auch: http://www.rsa.com) Unter dem Stichwort ``public key\index{public key}''-Verfahren werdenall die kryptografischen Verfahren zusammengefasst, die nach dem Doppelschlüsselverfahren(public key - private key\index{private key}) arbeiten.\cite{RSA:1998}So einfach wie die Idee ist, so lange hat es gedauert, bis man gedanklichso weit war, sich von letztlich jahrtausendelang geprägten Vorstellungenzur kryptografischen Behandlung von Informationen zu trennen. DasPatent für das RSA-Verfahren liegt bei Ron Rivest\index{Rivest}, AdiShamir\index{Shamir} und Leonard Adleman\index{Adleman}, \cite{RSA:1978}obwohl mittlerweile überhaupt nicht mehr sicher ist, ob nicht derenglische Geheimdienst schon sehr viel früher die Theorie der public-key-Verfahrenentwickelt hatte. Da Geheimdienste grundsätzlich keine Auskünfte überihre Arbeiten geben und darausfolgend in der Regel auch keinerleiPatente anmelden, bleiben dies Spekulationen.\cite{Gröhndahl:1998}Das public-key-Prinzip lässt sich ganz einfach beschreiben:* Verwendung asymmetrischer Schlüssel;* A fragt B nach einem Schlüssel, mit dem A einen an B zu sendenden  Text verschlüsseln soll;* B sendet ohne besondere Sicherheitsvorkehrungen an A den angeforderten  (öffentlichen) Schlüssel Key_{public};* A verschlüsselt mit Key_{public} den Text und sendet ihn ohne besondere  Sicherheitsvorkehrungen an B;* B entschlüsselt mit einem Gegenschlüssel (Key_{private}) den Text;* ergibt der entschlüsselte Text keinen Sinn, wurde dieser Text oder  der von B an A gesendete öffentliche Schlüssel entweder passiv (physikalische  Störungen im Datentransport) oder aktiv (Hackerangriff) verändert,  was jedoch kein großes Problem darstellt, da entweder B diesen Text  entschlüsselt oder keiner!7.1 Mathematische GrundlagenAus der Zahlentheorie\index{Zahlentheorie} werden folgende beiden Sätzebenötigt:\label{th1}Satz von Euler: Seien a und n zwei natürliche und teilerfremdeZahlen([footnote] ggT(a,n)=1)  und sei \varphi (n) die Anzahl der zun teilerfremden Zahlen (Eulersche Funktion) kleiner als n. Dann gilt([footnote] Hierund im folgenden wird die in der Technik übliche Schreibweise a\mod b=cverwendet, während in der Mathematik a \equiv c\mod b üblich ist. )  a^{\varphi (n)}\mod n=1Ist n=p eine Primzahl, dann folgt \varphi (p)=p-1, denn p ist Primzahlund somit nicht durch eine Zahl, die kleiner als p ist, teilbar. \label{th2}(Kleiner) Satz von Fermat: Ist p eine Primzahl und a<p, danngilt a^{p}\mod p=aAus den Sätzen von Euler\index{Euler} (Theorem \ref{th1}) und Fermat\index{Fermat}(Theorem \ref{th2}) folgt jetzt:\ref{th3}\label{th3}Seien n=p\cdot q das Produkt zweier Primzahlen p und q,sowie e und d zwei Zahlen mit der Eigenschaft (e\cdot d)\mod \varphi (n)=1.Dann gilt für jede Zahl m\leq n:m^{e\cdot d}\mod n=m 7.2 Die Schlüsselvergabe\index{Schlüsselvergabe}Es werden zwei hinreichend große Primzahlen p und q gewählt und dasProdukt n=p\cdot q gebildet. Dann ist \varphi (n)=(p-1)\cdot (q-1).([footnote] Dap und q nach Vereinbarung Primzahlen sind hat jeder (p-1) bzw. (q-1)teilerfremde Zahlen, die jeweils kleiner als p bzw. q sind. Für p=7ergeben sich die sechs teilerfremden Zahlen \{1,2,3,4,5,6\}, die sämtlichkleiner 7 sind.)  Mit einer zu \varphi (n) teilerfremden Zahl e wirdeine weitere Zahl d derart bestimmt, dass (e\cdot d)\mod \varphi (n)=1gilt. Eine derartige Zahl d lässt sich immer mit Hilfe des erweitertenDivisionsalgorithmus vom Euklid oder einem einfachen Algorithmus([footnote] vgl.folgendes Kapitel)  bestimmen. e ist jetzt der öffentliche Schlüsselund d der private Schlüssel, die gemeinsam nur einer einzigen Personbekannt sein sollten.7.3 Beispiel zur Bestimmung von d und eGewählt werden die beiden Primzahlen\index{Primzahlen} p=17 und q=31,womit sich für n und \varphi (n) folgendes ergibt:p & = & 17\nonumber \\q & = & 31\\n & = & p\cdot q=527\nonumber \\\varphi (n) & = & (p-1)\cdot (q-1)=16\cdot 30=480\nonumber Unter der Bedingung, dass e teilerfremd zu \varphi (n) ist, wird jetztwillkürlich e=7gewählt.([footnote] Somit ist e=7 teilerfremd zu \varphi =480. ) Für die Bestimmung von d e & = & 7\nonumber \\(e\cdot d)\mod \varphi (n) & = & 1\quad \textrm{Forderung}!\nonumber \\ & \Leftrightarrow  & \nonumber \label{Gl-ed} \\(e\cdot d) & = & x\cdot \varphi (n)+1\nonumber \\d & = & \frac{x\cdot \varphi (n)+1}{e}\quad x,d\in N\nonumber Ausgehend von x=1 braucht jetzt nur noch ein ganzzahliges d bestimmtzu werden, was mit einem kleinen Javaprogramm leicht möglich ist (Alg.\ref{eBestimmung}). Wird das Programm mit den Parametern ``7'' und``480'' aufgerufen, so ergibt sich folgende Ausgabe:Somit ergibt sich für den privaten Schlüssel \{d=343;\quad n=527\}und für den öffentlichen Schlüssel \{e=7;\quad n=527\}. Die Transformationsgleichungenlauten dann:g & = & t^{d}\mod n\nonumber \\t & = & g^{e}\mod nHierinbedeuten t das unverschlüsselte und g das verschlüsselte Zeichen bzw.Wort. Wie diese jetzt auf die einzelnen zu kodierenden Zeichen angewendetwerden zeigt das folgende Kapitel an einem Beispiel.d7.4 Beispiel zur RSA-CodierungZuerst soll das Wort ``Wort'' kodiert werden. Grundsätzlich gilt:(ASCII-Wert)^{e}\mod n=ASCII-Wert_{Neu}Angewendet auf ``Wort'' ergibt sich:\textrm{W}:\, 87^{7}\mod 527 & = & 366\nonumber \\\textrm{o}:\, 111^{7}\mod 527 & = & 257\nonumber \\\textrm{r}:\, 114^{7}\mod 527 & = & 228\\\textrm{t}:\, 116^{7}\mod 527 & = & 91\nonumber Damit einheitliche ``Wortlängen'' vorliegen, müssen die kodierten Zahleneventuell mit Nullen aufgefüllt werden, was im vorliegenden Beispielfür den Buchstaben ``t'' der Fall war. Den zugrundeliegenden Algorithmuszeigt Alg.\ref{Kodieren}. \label{Kodieren}Im allgemeinen verwendet man 512 Bit lange Zahlen des Originaltextes,was 64 ASCII (8 Bit pro Zeichen) oder 32 Unicode-Zeichen (16 Bit proZeichen) entspricht. Das Wort ``Wort'' würde also erst zur Integerzahl 000000000000000000000000000000000000000000000000000008711114116gewandelt. In Java wäre eine 512 Bit lange Zahl als LongInteger\index{LongInteger}eine gerade noch darstellbare Zahl, denn diese umfasst genau 64 Bit.Um Probleme zu vermeiden, sollte das Package java.math.BigInteger\index{java.math.BigInteger}verwendet werden. Mit BigInteger\index{BigInteger} meinBigInt=newBigInteger(ZahlAlsString) kann im Prinzip eine beliebig große Integer-Zahlerzeugt werden. Im folgenden wird ein Beispiel für die Kodierung vonBlöcken  vier ASCII-Zeichen angegeben.Zuerst sollte man sich ein geeignetes Primzahlenpaar\index{Primzahlenpaar}erzeugen, was mit Hilfe der Methode nach Erathostenes([footnote] Siebdes Erathostenes)  relativ einfach und schnell möglich ist (Alg.\ref{Primzahlen}).So erhält man mit java Primzahl 999 die Ausgabe der Primzahlen imIntervall [2...999]:\LiesText{Primzahlen.txt}\label{Primzahlen}Um ein etwas realistischeres Vorgehen zu zeigen, werden zwei größerePrimzahlen gewählt:p & = & 9999973\nonumber \\q & = & 9999991Mit einem kleinen Javaprogramm (Alg.\ref{BildeSchluessel}) kann mansich jetzt die Arbeit etwas erleichtern. Bei der Vorgabe der beidenPrimzahlen bestimmt das Programm n=p\cdot q und \varphi (n)=(p-1)\cdot (q-1).Weiterhin werden dann alle Zahlen ausgegeben, die kleiner als \varphi (n)und relativ prim([footnote] Diese Zahl und \varphi (n) haben dannkeine gemeinsame Teiler, bzw. ggT(Zahl,\varphi (n))=1; der größtegemeinsame Teiler ist gleich 1.)  zu \varphi (n) sind, woraus dann willkürlicheine Zahl ausgewählt wird:\LiesText{BildeSchluessel.txt}Hier wird e=1033 ausgewählt, womit der erste Schlüssel festliegt:\textrm{Erster Schluessel}:\, \textrm{ }(e,n)=(1033;99999640000243)\label{BildeSchluessel}Nach Gl.\ref{Gl-ed} muss jetzt noch als ``Gegenschlüssel\index{Gegenschlüssel}''der zweite Schlüssel (d,n) bestimmt werden, was mit Alg.\ref{eBestimmung}erfolgt, welcher nur Gl.\ref{Gl-ed} anwendet, indem eine Zahl d\in Nbestimmt wird, was erledigt ist, wenn der Rest der Division in Gl.\ref{Gl-ed}gleich Null ist, was bei dem gewählten e insgesamt 657 Durchgängeerfordert, d.h.:d=\frac{657\cdot 99999640000243+1}{1033}=63600919980817\quad d\in N\, (!)\LiesText{dBestimmen.txt}Damit ist nun auch der zweite Schlüssel\index{Schlüssel} bestimmt,womit der formale Ablauf zum Verschlüsseln von Texten erledigt ist:\textrm{Zweiter Schluessel}:\, \textrm{ }(d,n)=(63600919980817;99999640000243)Grundsätzlich sind privater und öffentlicher Schlüssel gleichberechtigt,d.h. der private Schlüssel\index{privater Schlüssel} kann auch zumöffentlichen bestimmt werden und umgekehrt. Wichtig ist und bleibtnur der private Schlüssel! Der öffentliche Schlüssel\index{öffentlicher Schlüssel}kann in beliebiger Form bekannt gemacht werden, z.B. einer jeden eMailals Information angehängt oder in einem öffentlich zugänglichen ``Schlüssel-Telefonbuch''eingetragen werden. Für das weitere Vorgehen wird hier die Schlüsselwie folgt festgelegt:\textrm{private key} & = & (63600919980817;99999640000243)\nonumber \\\textrm{public key} & = & (1033;99999640000243)\label{Keys} Jemand möchte nun eine Nachricht verschlüsselt versenden und bedientsich dazu des Schlüssels public key. Mit dem Alg.\ref{RSAEncode},der durch java RSAEncode(<öffentlicher Schlüssel>,Textdatei) gestartet wird, wird eine Datei mit dem verschlüsselten Text erzeugt:\LiesText{RSAEncode.txt}\label{RSAEncode}\lst{RSAEncode.java}{Verschlüsseln einer Textdatei}Zur Kontrolle wird der gesamte zu verschlüsselnde Text noch einmalausgegeben. Danach erfolgt eine Vorgehensweise in Viererblöcken\index{Viererblöcke},was durch Zeile 6 in Alg.\ref{RSAEncode} festgelegt wurde. Der ersteVierblock ist dann ``Bei ``([footnote] Das vierte Zeichen ist dasLeerzeichen.) , der als Bytefolge ``066101105032'' entspricht. DieseBytefolge\index{Bytefolge} wird nun überChiffre=066101105032^{1033}\mod 99999640000243=91587891977482verschlüsselt. Die größte auftretende verschlüsselte Zahl ist wegender Modulo-Operation\index{Modulo-Operation} (n-1), womit einsichtigwird, dass die verschlüsselten Zahlen maximal 14 Stellen haben können.Aus den vier Byte der Zeichenkette ``Bei ``, was 32 Bit entspricht,wird im ungünstigsten Fall eine 47 Bit lange Zahl, was bei einer Byte-Einteilungder Variablen sechs Byte entspricht. Somit ist der chiffrierte Textimmer länger als der Originaltext. Bei den hier angegeben Algorithmenwurde der Einfachheit halber auf eine Optimierung verzichtet, so dassdie verschlüsselte Zahl als Bytefolge der einzelnen Ziffern gespeichertwurde, was bei 14 stelligen Zahlen dann auch 14 Byte([footnote] mit14 Byte=112 Bit lassen sich 34-stellige natürliche Zahlen darstellen.) entspricht, wodurch der verschlüsselte Text erheblich umfangreicherwird, denn die Redundanz\index{Redundanz} ist beträchtlich.7.5 Beispiel zur RSA-DekodierungDie Entschlüsselung geschieht immer mit dem privaten Schlüssel\index{Schlüssel}(private key\index{private key} Gl.\ref{Keys}) und entspricht vomAlgorithmus prinzipiell der Verschlüsselung.\LiesText{RSADecode.txt}Gestartet wird der Algorithmus durchjava RSADecode(<privater Schlüssel>,Verschlüsselte-Datei)wobei zur Kontrolle noch einmal die verschlüsselte Datei ausgegebenwird. Die Blockgröße\index{Blockgröße} von 14 Zeichen liegt durchden Schlüssel und die Modulo-Funktion fest,([footnote] vgl. vohergehendenAbschnitt)  so dass als ersten Block ``91587891977482'' eingelesen wird.Die EntschlüsselungOriginal=91587891977482^{63600919980817}\mod 99999640000243=66101105032führt zur Zeichenfolge ``066101105032''([footnote] Die Anzahl der Zeichenmuss wegen der ASCII-Kodierung ein Vielfaches von 3 sein, so dassleicht führende Nullen ermittelt werden können. Das Ergebnis ``66101105032``ist 11-stellig und muss daher auf 12 Stellen zu ``066101105032'' ergänztwerden.) , die den ASCII-Werten ``066'', ``101'', ''105'' und ``032''oder der ASCII-Zeichenfolge ``Bei `` entspricht. der Alg.\ref{RSADecode}verlangt zusätzlich die Angabe eines Dateinamens zur Ausgabe der entschlüsseltenDatei, was jedoch unabhängig vom Prinzip des Entschlüsselns ist.7.6 SicherheitVerschlüsselungen nach dem RSA-Verfahren sind ebenfalls nur bedingtsicher, denn genau wie beim DES-Verfahren, kann auch hier durch Vernetzungvon Hochleistungsrechnern einfach der gesamte Schlüsselraum durchsuchtwerden. Im Gegensatz zum DES-Verfahren bietet RSA eine große Angriffsfläche in bezug auf den öffentlichen Schlüssel, der nach Beliebenmanipuliert werden kann und somit ein Eingriff in den verschlüsseltenDatenaustausch vorliegt. Weiterhin erhält man durch mehrere Texte,die alle mit demselben öffentlichen Schlüssel verschlüsselt wurden,umfangreiche Informationen, die hilfreich für einen Angriff auf denprivaten Schlüssel sind. Grundsätzlich kann man sagen, dass eine RSA-Verschlüsselung für Informationensinnvoll ist, die schnell veralten, während dass Dreifach-DES auchfür längere Zeiten sinnvoll ist.8 Digitale UnterschriftenDie Bedeutung der Unterschrift\index{Unterschrift} ist in den wirtschaftlichsehr weit entwickelten Ländern im letzten Jahrhundert enorm gestiegen.Es gibt faktisch keinen Vorgang mehr, der nicht durch eine Unterschrift(Signatur\index{Signatur}) bestätigt (signiert) werden muss. Dabeigibt es zwischen den einzelnen Staaten große Unterschiede, denn beiweit verbreitetem Analphabetismus müssen andere Wege gegangen werden.Andererseits gibt es auch Staaten, deren staatliche Strukturen einfachdafür sorgen, dass die Unterschrift eine relativ geringe Bedeutunghat. So waren z.B. fast alle ehemaligen DDR-Bürger sehr erstaunt,was sie mit dem Tag der Wiedervereinigung alles an Unterschriftenleisten mussten, denn ihr eigens Staatswesen kannte nur wenige Verwaltungs-oder Wirtschaftsvorgänge, die durch Unterschrift bestätigt werdenmussten. Im Zusammenhang mit dem zunehmenden eCommerce\index{eCommerce}([footnote] Sieheauch http://www.cybercash.de/ccsystem/sicherheit.html)  und allgemeinemDatenaustausch im Internet entsteht das Problem, wie Dokumente durchUnterschrift offiziell signiert werden können, was momentan insbesonderefür Bestellungen wichtig ist. Das Verschlüsseln von gesamten Dokumenten,einschließlich des Klartextnamens des Unterzeichners, ist zwar möglich,jedoch sehr zeitaufwendig. Andererseits entsteht einem Unternehmen,welches seinen Warenverkehr per Internet abwickelt, das große Problemder Schlüsselverwaltung, den ein sehr großer Kundenstamm implizierteine umfangreiche Datei an notwendigen öffentlichen Schlüsseln. Grundsätzlichbefindet sich das Problem der digitalen Signaturen noch in einer starkenEntwicklung, so dass hier nur einige Möglichkeiten aufgezeigt werdensollen.8.1 Das RSA-VerfahrenDie Verschlüsselung nach dem RSA-Verfahren läßt sich grundsätzlichauf das Problem der digitalen Unterschriften\index{Unterschriften}übertragen. Geht es darum, dass z.B. eine Bestellung durch eine Unterschriftlegitimiert werden muss, so braucht der Besteller seine Unterschriftnur mit seinem privaten Schlüssel zu verschlüsseln. Das in den vorhergehendenAbschnitten behandelte Verfahren zum Verschlüsseln von Dokumentenwird also umgekehrt. Das unverschlüsselte Dokument kann jetzt mitder verschlüsselten Unterschrift versendet werden. Dieses Verfahrenmacht jedoch nur Sinn, wenn der Empfänger der Mail sicherstellen will,dass der Sender identifiziert werden kann. Denn durch die Umkehrungdes Verfahrens kann jetzt praktisch jeder die verschlüsselte Unterschriftentschlüsseln, denn es ist jetzt nur der öffentliche Schlüssel nötig.Diese Möglichkeit der digitalen Unterschrift ist also sehr eingeschränkt.8.2 Digitale Signaturen\index{Signaturen}Bestellungen im Internet brauchen sowohl eine Verschlüsselung der Bestellungals auch der Unterschrift, denn in diesem Fall wollen sowohl Sender(Bestellung) als auch Empfänger (Unterschrift) eine Sicherheit. Damitwäre man wieder bei der Verschlüsselung gesamter Dokumente angelangt,was immer sehr aufwendig ist. Da die Bestellung an sich kein geheimesDokument ist, vom inhaltlichen her also gar nicht verschlüsselt zuwerden braucht, gilt es einfach nur dafür zu sorgen, dass man demEmpfänger eine einfachere Möglichkeit eröffnet, sicherzustellen, dassder empfangene Klartext auch derjenige ist, der vom Absender mit derverschlüsselten Unterschrift stammt. Diese Überlegung führt zum Begriffder digitalen Signatur\index{digtale Signatur}.8.3 Das Arbeiten mit der Hashfunktion\index{Hashfunktion}Ausgangspunkt ist die Frage, ob man einem Text beliebiger Länge einedigitale Signatur\index{Signatur} einer bestimmten Länge zuordnenkann, die eindeutig nur diesem Text zugeordnet werden kann, dass alsoText beliebiger Länge und Signatur eine Einheit bilden, wie dies bekanntermassenzwischen dem formalen Aufenthaltsort eines Menschen und der Postadresseoder den GPS-Koordinaten bereits gegeben ist. Dabei weiss jemand,der die betreffende Person aufsuchen wollte, noch lange nicht, wieman den physikalischen Ort den logischen Angaben zuordnet. Formalbetrachtet versteht man unter der Hashfunktion folgende Abbildung:h:\quad \Sigma ^{*}\rightarrow \Sigma ^{n},\quad n\in \mathds {N}Ein Zeichenkette beliebiger Länge (*) wird einer Zeichenkette bestimmterLänge (n) zugeordnet. Sie unterscheidet sich damit von der sogenanntenKompressionsfunktion\index{Kompressionsfunktion}, die immer einerZeichenkette der Länge m eine solche der Länge n zuordnet, wobei m>ngilt:k:\quad \Sigma ^{m}\rightarrow \Sigma ^{n},\quad m>n,\quad n\in \mathds {N}Man spricht von Einwegfunktionen\index{Einwegfunktion}, wenn es praktischunmöglich ist zu einem gegegeben Hashwert\index{Hashwert} s\in \Sigma ^{n}ein x\in \Sigma ^{*} mit h(x)=s zu finden. Praktisch unmöglich heissteindeutisch nicht theoretisch unmöglich! Grundsätzlich gilt wiederder Zusammenhang, dass der zeitliche Aufwand in keinem Verhältniszum dem dann noch vorhandenen Informationsgehalt des gesuchten Originalwortessteht. Daraus folgt dann aber auch, dass es im mathematischen Sinneüberhaupt nicht sicher ist, ob es eigentlich Einwegfunktionen gibt.\cite[Seite 166]{buchmann:00} Man spricht von einer Kollision\index{Kollision}, wenn es zu zwei verschiedenenZeichenketten dieselben Hashwerte gibt. Nach heutiger Kenntnis habenalle Hashfunktionen Kollisionen.([footnote] mathematisch formuliert:Alle Hash- und Kompressionsfunktionen sind nicht injektiv, daher auchnie kollisionsfrei.)  Um nun trotzdem ein messbares Kriterium für Hashfunktionenzu haben, spricht man von schwach kollisionsresistent\index{kollisionsresistent},wenn es praktisch unmöglich ist, zu einem gegebenen x\in \Sigma ^{*}eine Kollisionspaar (x,x') mit der Eigenschaft h(x)=h(x') zu finden. ([tab] Name       | Blocklänge | relative Geschwindigkeit |+------------+------------+--------------------------+| MD4        | 128        | 1.00                     |+------------+------------+--------------------------+| MD5        | 128        | 0.68                     |+------------+------------+--------------------------+| RipeMD-128 | 128        | 0.39                     |+------------+------------+--------------------------+| SHA-1      | 160        | 0.28                     |+------------+------------+--------------------------+| RipeMD-160 | 160        | 0.24                     |+------------+------------+--------------------------+\label{hash}Typische Hashfunktionen) Bekannte Hashfunktionen zeigt Abb.\ref{hash}, die natürlich täglichenAngriffen ausgesetzt sind, da es auch hier immer ein mindestens wissenschaftlicherWettkampf bleibt zwischen den ``Erfindern'' von kollisionsfreien Hashfunktionenund den ``Angreifern'', die dies widerlegen wollen. So gelten MD4und MD5 nicht mehr als kollisionsresistent, denn es wurde jeweilseine Kollision gefunden. Das dazu 2^{20} verschiedene Haschwerte nötigwaren ist dabei uninteressant. Dennoch wird der MD4 zugrundeliegendeAlgorithmus weiterhin für die Hashfunktion verwendet.\cite[S. 171]{buchmann:00}([fig] \resizebox*{12cm}{!}{\includegraphics{hashcode.eps}} \label{HashCode.eps}Ausgabedes Java-Programms zur Hashcode-Bestimmung) Ein einfaches Programm zur Bestimmung eines Hashcodes für einen Stringzeigt Alg.\ref{HasCOde.alg}. Der dort ermittelte Hashcode hc=695059024ist mit hier ausreichender Wahrscheinlichkeit ein Unikat, was bedeutet,dass keinem anderen String dieser Hashcode zugeordnet wird und zumanderen auch sehr verschieden von dem Hashcode, der sich ergibt, wennnur ein einziges Zeichen verändert wird, was durch Abb.\ref{HashCode.eps}bestätigt wird, wo beim letzten Hashcode nur das erste Wort unterschiedlichist.([footnote] ``Dis'' statt ``Dies'') \label{HasCOde.alg}\lst{StringHashCode.java}{Bestimmen des Hashcodeseiner Zeichenkette}([fig] \begin{center}\begin{pspicture}(0,0)(13.5,9)\rput(2.25,8.25){\bf\bf Dokument}\rput(11.25,6.25){\bf \bf  Signiertes Dokument}\rput(1.5,0.5){\bf\bf Hashcode} \rput(6.5,0.75){\bf \bf Verschlüsselte Hashcode} \rput(6.5,0.25){\bf\bf (Signatur)}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=gray](0,1)(3,2)\rput(1.5,1.5){\bf695059024}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=gray](3,2.5)(4.75,4)\psline[linewidth=0.2cm,linearc=.25]{->}(3,1.5)(3.5,1.5)(3.5,3.5)(4.25,3.5)(4.25,1.5)(5,1.5)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=gray](5,1)(8,2)\rput(6.5,1.5){\bf56870041289196}\psframe[linewidth=1pt,fillstyle=solid,fillcolor=lightgray](0,6)(4.5,8)\rput[l](0.2,7.5){\footnotesizeDies ist ein Dokument, ein} \rput[l](0.2,7){\footnotesize ziemlich wichtigesDokument,}\rput[l](0.2,6.5){\footnotesize was deswegen signiert wird}\psline[linewidth=0.2cm]{->}(1.5,6)(1.5,2)\rput[l](2,5.5){\bf Hashendes}\rput[l](2,5){\bf Dokuments}\psline[linewidth=0.2cm]{->}(4.5,7)(9,5)\psline[linewidth=0.2cm]{->}(8,1.5)(11,3)\psframe[linewidth=1pt,fillstyle=solid,fillcolor=lightgray](9,4)(13.5,6)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=gray](9,3)(13.5,4)\rput[l](9.2,5.5){\footnotesizeDies ist ein Dokument, ein}\rput[l](9.2,5){\footnotesize ziemlich wichtigesDokument,}\rput[l](9.2,4.5){\footnotesize was deswegen signiert wird}\rput(11.25,3.5){\bf56870041289196}\rput[l](5,4){\bf Verschlüsseln}\rput[l](5,3.5){\bf desHashcodes}\rput[l](5,3){\bf mit geheimem}\rput[l](5,2.5){\bf Schlüssel}\rput[l](10,2){\bf Koppeln von}\rput[l](10,1.5){\bf  Dokument und}\rput[l](10,1){\bf  Signatur}\end{pspicture}\end{center}\label{Signieren}Vorgangdes Signierens) Java bestimmt die Hashcodes für einen String mit einer einfachen mathematischenBeziehung:c & = & s[0]\cdot 31^{n-1}+s[1]\cdot 31^{n-2}+...+s[i]\cdot 31^{n-i-1}+...+s[n-1]\label{Hascode-Gl} \\s[i] & : & \textrm{Ordinalzahl des i}-\textrm{ten Zeichens}\nonumber \\n & : & \textrm{Anzahl der Zeichen der Zeichenkette}\nonumber Für ein einzelnes Zeichen ergibt sich somit die Ordinalziffer, demZeichen A wird der Hashcode 65 zugeordnet (Abb.\ref{HashCode.eps}).Andererseits ist sofort klar, dass man bei dieser Art der Kodierungrelativ schnell vom Hashcode rückwärts auf die Zeichenkette schließenkann. In sicherheitsrelevanten Systemen wird daher eine Oneway-Hashcode-Verschlüsselunggewählt, womit dann kein Rückschluss mehr auf den Klartext möglichist. Derartige Oneway\index{Oneway}-Verschlüsselungen sind dann logischerweiseerheblich aufwendiger als Gl.\ref{Hascode-Gl}.8.4 Das Signieren\index{Signieren}Den formalen Ablauf des Signierens zeigt Abb.\ref{Signieren}:* Hashcode\index{Hashcode} des Dokuments bestimmen (``Hashen'')* Hashcode mit dem privaten (geheimen) Schlüssel verschlüsseln* Hashcode und Text zusammen versenden([fig] \begin{center}\begin{pspicture}(0,0)(15,8.5)\rput(2.25,8.25){\bfSigniertesDokument}\rput(8.25,8.25){\bf Dokument}\rput(1.5,0.5){\bf Signatur}\rput(6.5,0.5){\bf Hashcode aus Signatur}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=gray](0,1)(3,2)\rput(1.5,1.5){\bf56870041289196}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=lightgray](3,2.5)(4.75,4)\psline[linewidth=0.2cm,linearc=.25]{->}(3,1.5)(3.5,1.5)(3.5,3.5)(4.25,3.5)(4.25,1.5)(5,1.5)\rput[l](5,4){\bfEntschlüsseln}\rput[l](5,3.5){\bf des Hashcodes}\rput[l](5,3){\bf mitöffentlichem}\rput[l](5,2.5){\bf Schlüssel}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=gray](5,1)(8,2)\rput(6.5,1.5){\bf695059024}\psframe[linewidth=1pt,fillstyle=solid,fillcolor=lightgray](0,6)(4.5,8)\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=gray](0,5)(4.5,6)\rput[l](0.2,7.5){\footnotesizeDies ist ein Dokument, ein} \rput[l](0.2,7){\footnotesize ziemlich wichtigesDokument,}\rput[l](0.2,6.5){\footnotesize was deswegen signiert wird}\psline[linewidth=0.2cm]{->}(1.5,5)(1.5,2)\rput(2.25,5.5){\bf 56870041289196}\rput(13.5,8.25){\bfHashcode} \rput(13.5,7.75){\bf aus Dokument}\rput[l](1.75,4.75){\bf Zerlegen}\rput[l](4.75,6.5){\bfZer-}\rput[l](4.75,6){\bf legen}\rput[l](10.5,6.5){\bf Hashen}\psline[linewidth=0.2cm]{->}(4.5,7)(6,7)\psline[linewidth=0.2cm]{->}(10.5,7)(12,7)\psframe[linewidth=1pt,fillstyle=solid,fillcolor=lightgray](6,6)(10.5,8)\rput[l](6.2,7.5){\footnotesizeDies ist ein Dokument, ein}\rput[l](6.2,7){\footnotesize ziemlich wichtigesDokument,}\rput[l](6.2,6.5){\footnotesize was deswegen signiert wird}\psframe[linewidth=1pt,framearc=0.3,fillstyle=solid,fillcolor=gray](12,6.5)(15,7.5)\rput(13.5,7){\bf695059024}\psline[linewidth=0.2cm]{->}(13.5,6.5)(13.5,2)\pscircle[linecolor=gray,fillstyle=solid,fillcolor=lightgray](13.5,1.5){0.5} \psline[linewidth=0.2cm]{->}(8,1.5)(13,1.5)\rput(13.5,1.5){\large\bf ok?}\rput[l](9.5,3.5){\bf  Vergleich der}\rput[l](9.5,3){\bf  Hashcodesaus}\rput[l](9.5,2.5){\bf  Hashen und}\rput[l](9.5,2){\bf  Entschlüsseln!}\end{pspicture}\end{center}\label{SignaturTest}Überprüfung von Textund Signatur) Die Überprüfung des Klartextes erfolgt jetzt vom Empfänger prinzipiellauf dem umgekehrten Weg, wobei allerdings eine Kenntnis des öffentlichenSchlüssels des Versenders der Nachricht nach wie vor zwingend ist.Der Ablauf ist im einzelnen wie folgt (Abb.\ref{SignaturTest}):* Nachricht in Klartext und Signatur zerlegen  * den Hashcode des Klartextes erzeugen  * Signatur entschlüsseln* Hashcode der entschlüsselten Signatur und des Textes vergleichen Unabhängig davon gilt es immer noch der rechtlichen Seite der digitalenSignatur bzw. der digitalen Unterschrift Aufmerksamkeit zu widmen,denn das Thema ist noch lange nicht erschöpfend behandelt.([footnote] Sieheauch: Jörg Tauss (MdB): Digitale Signatur und Verschlüsselung - http://www.tauss.de/bn/sigtext.html Kryptographie:Rechtliche Situation, politische Diskussion - http://www.thur.de/ulf/krypto/verbot.htmlBert-JaapKoop: Crypto Law Survey - http://cwis.kub.nl/~frw/people/koops/lawsurvy.htm) \cite{natrup:1999} \cite{matzky:1999}9 GlossarBlowfish: is an algorithm developed by Bruce Schneier. It is a block  cipher with 64-bit block size and variable length keys (up to 448  bits). It has gained a fair amount of acceptance in a number of  applications. No attacks are known against it. Blowfish is used  in a number of popular software packages, including Nautilus and  PGPfone. ciphertext\index{ciphertext} (verschlüsselter Text) the transformed  message cipher\index{cipher} (Verschlüsselungsalgorithmus\index{Verschlüsselungsalgorithmus})  an algorithm for transforming an intelligible message into one that  is unintelligible by transposition and/or substitution methods code\index{code} (Kode\index{Kode}) an algorithm for transforming  an intelligible message into an unintelligible one using a code-bookcryptoanalysis\index{cryptanalysis} (Kryptoanalysis\index{Kryptoanalysis})  the study of principles and methods of transforming an unintelligible  message back into an intelligible message without knowledge of the  key. Also called codebreaking\index{codebreaking} (Kodebrecher\index{Kodebrecher}) cryptography\index{cryptography} (Kryptografie\index{Kryptografie})  the art or science encompassing the principles and methods of transforming  an intelligible message into one that is unintelligible, and then  retransforming that message back to its original form cryptology\index{cryptology} (Krytologie\index{Krytologie}) both cryptography  and cryptanalysis decipher\index{decipher}-decode\index{decode} (entschlüsseln\index{entschlüsseln})  the process of converting ciphertext back into plaintext using a  cipher and a key DES Data Encryption Standard, issued by the National Bureau of Standards  as Federal Information Prosessing Standard Publication FIPS-PUPS  46-2. DES is an algorithm developed in the 1970s. It was made a  standard by the US government, and has also been adopted by several  other governments worldwide. It is widely used, especially in the  financial industry. Diffie-Hellman: is a commonly used public-key algorithm for key exchange.  It is generally considered to be secure when sufficiently long keys  and proper generators are used. The security of Diffie-Hellman relies  on the difficulty of the discrete logarithm problem (which is believed  to be computationally equivalent to factoring large integers). Diffie-Hellman  is sensitive to the choice of the strong prime and the generator.  The size of the secret exponent is also important for its security.  Conservative advice is to make the random exponent twice as long  as the intended session key. One should note the results presented  in Brian A. LaMacchia and Andrew M. Odlyzko, Computation of Discrete  Logarithms in Prime Fields, Designs, Codes and Cryptography 1 (1991),  47-62. Basically, they conclude that by doing precomputations, it  is possible to compute discrete logarithms relative to a particular  prime efficiently. The work needed for the precomputation is approximately  equal or slightly higher than the work needed for factoring a composite  number of the same size. In practice this means that if the same  prime is used for a large number of exchanges, it should be larger  than 512 bits in size, preferably 1024 bits. There is also a new  timing attack that can be used to break many implementations of  Diffie-Hellman.DSS (Digital Signature Standard): A signature-only mechanism endorsed  by the United States Government. Its design has not been made public,  and many people have found potential problems with it (e.g., leaking  hidden data the signature, and revealing your secret key if you  ever happen to sign two different messages using the same random  number). Elliptic curve public key cryptosystems: is an emerging field.  They have been slow to execute, but have become feasible with modern  computers. They are considered to be fairly secure, but haven't  yet undergone the same scrutiny as for example RSA.encipher\index{encipher}-encode\index{encode} (verschlüsseln\index{verschlüsseln})  the process of converting plaintext to ciphertext using a cipher  and a key ElGamal: public key cryptosystem. Based on the discrete logarithm  problem.IDEA (International Data Encryption Algorithm): is an algorithm  developed at ETH Zurich in Switzerland. It uses a 128 bit key, and  it is generally considered to be very secure. It is currently one  of the best public known algorithms. It is a fairly new algorithm,  but it has already been around for several years, and no practical  attacks on it have been published despite of numberous attempts  to analyze it. IDEA is patented in the United States and in most  of the European countries. The patent is held by Ascom-Tech. Non-commercial  use of IDEA is free. Commercial licenses can be obtained by contacting  idea@ascom.ch.key\index{key} (Schlüssel\index{Schlüssel}) some critical information  used by the cipher, known only to the sender & receiver LUC: is a public key encryption system. It uses Lucas functions instead  of exponentiation. It's inventor Peter Smith has since then implemented  four other algorithms with Lucas functions: LUCDIF, a key negotiation  method like Diffie-Hellman; LUCELG PK, equivalent to El Gamal public-key  encryption; LUCELG DS, equivalent to El Gamal digital signature;  and LUCDSA, equivalent to the US Digital Siganture Standard. LUC  Encryption Technology Ltd has obtained patents for cryptographic  use of Lucas functions in United States and New Zealand. MD2, MD4: These are older hash algorithms from RSA Data Security.  They have known flaws, and their use is not recommended. MD5 (Message Digest Algorithm 5) is a secure hash algorithm developed  at RSA Data Security, Inc. It can be used to hash an arbitrary length  byte string into a 128 bit value. MD5 is in wide use, and is considered  reasonably secure. plaintext\index{plaintext} (Quelltext\index{Quelltext}-Klartext\index{Klartext})  the original intelligible message RC4: is a cipher designed by RSA Data Security, Inc. It used to be  a trade secret, until someone posted source code for an algorithm  in Usenet News, claiming it to be equivalent to RC4. There is very  strong evidence that the posted algorithm is indeed equivalent to  RC4. The algorithm is very fast. Its security is unknown, but breaking  it does not seem trivial either. Because of its speed, it may have  uses in certain applications. It can also accept keys of arbitrary  length. RC4 is essentially a pseudo random number generator, and  the output of the generator is xored with the data stream. For this  reason, it is very important that the same RC4 key never be used  to encrypt two different data streams. The United States government  routinely approves RC4 with 40 bit keys for export. Keys that are  this small can be easily broken by governments, criminals, and amateurs.RIPEMD-160: Most recent hash algorithm, which is designed to replace  MD4 and MD5. It produces a digest of 20 bytes, reportedly runs at  40 Mb/s on a 90 MHz Pentium and has been placed in the public domain  by its designers. RSA (Rivest-Shamir-Adelman) is the most commonly used public key  algorithm. Can be used both for encryption and for signing. It is  generally considered to be secure when sufficiently long keys are  used (512 bits is insecure, 768 bits is moderately secure, and 1024  bits is good). The security of RSA relies on the difficulty of factoring  large integers. Dramatic advances in factoring large integers would  make RSA vulnerable. RSA is currently the most important public  key algorithm. It is patented in the United States (expires year  2000), and free elsewhere. For information on the recommended key  lengths for RSA, see for example the book "Applied Cryptography"  by Bruce Schneier. At present, 512 bit keys are considered weak,  1024 bit keys are probably secure enough for most purposes, and  2048 bit keys are likely to remain secure for decades. One should  know that RSA is very vulnerable to chosen plaintext attacks. There  is also a new timing attack that can be used to break many implementations  of RSA. The RSA algorithm is believed to be safe when used properly,  but one must be very careful when using it to avoid these attacks.SAFER: is an algorithm developed by J. L. Massey (one of the developers  of IDEA). It is claimed to provide secure encryption with fast software  implementation even on 8-bit processors. Two variants are available,  one for 64 bit keys and the other for 128 bit keys. SHA (Secure Hash Algorithm):([footnote] alsoSHS, Secure Hash Standard)  This is a cryptographic hash algorithm publishedby the United States Government. It produces an 160 bit hash valuefrom an arbitrary length string. Many people consider it quite good.It is a fairly new algorithm. Tiger is a new hash algorithm developed by Anderson and Biham. Triple-DES or 3DES: A variant of DES, is based on using DES three times  (normally in an encrypt-decrypt-encrypt sequence with three different,  unrelated keys). Many people consider Triple-DES to be much safer  than plain DES. Vigenere: is a historical cipher mentioned in many textbooks. It  is easily solvable. 10 ÜbungenÜbung 1: Mehrere Verfahren mit Vorlage für eine ``Kryptoscheibe''  zum Basteln([footnote] aus http://www.pbs.org/wgbh/nova/teachers/) Übung 2: Vigenreverfahren mit Arbeitsblättern zum Finden der Schlüsselwortlänge([footnote] nach \cite{witten:98}) Übung 3: Nach Vigenreverfahren verschlüsselter Text Übung 4: FeistelchiffreÜbung 5: DES\uebung{Schiebechiffre}You have been chosen by the British Secret Service to be a member ofStation X, the highly secret organization set up to decode Germanmessages during WWII. To prove you are up to the job, decode thiscipher sent to you from your leader, Winston Churchill. Decode the cipher below. As you discover what each encrypted letterrepresents, print it over the actual letter in the following alphabet.+---------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+| cypher: |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |+---------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+| actual: | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z |+---------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\vspace{1cm}\begin {center}\fbox{ Lx law bxpwnkwgiwky gl Ylgljxc V,Gy mxe icxo law Cgfjy agzw jczgpwp Uxtgcp gcp gkw lakwglwcjcq gtt xh Wekxuw. Mxek bxeclkm gcp law oxktp cwwp mxek awtu! J agzw baxywc mxe nwbgeyw mxe agzw law hjcwylsjcpy lx yxtzw law oxktp'y sxyl pjhhjbetl uefftw -- WCJQSG.Mxe seyl oxki dejbitm gcp jc ywbkwl awkw gl Ylgljxc V ecljt mxe nkwgi law bjuawk. Rxttm qxxp tebi!Yjk Ojcylxc Baekbajtt}\end{center}\vspace{1cm]\newpageProcedure In Part I, you broke a simple cipher. Now try creating a more complexcipher. 1. Cut out the NOVA Decoder Ring and NOVA Cipher Code Ring and the  window marked INDEX. 2. Neatly copy the decoded letters from the alphabet in Part I into  the outside spaces of the Decoder Ring. For example, you would write  cipher Y over the actual letter S and cipher X over the actual letter  O. When you finish, encrypt this simple message.+----------------+---+---+---+---+---+--+---+---+---+---+--+---+---+---+---+--+---+---+---+---+---+| simple cypher: |   |   |   |   |   |  |   |   |   |   |  |   |   |   |   |  |   |   |   |   |   |+----------------+---+---+---+---+---+--+---+---+---+---+--+---+---+---+---+--+---+---+---+---+---+| actual:        | L | O | O | S | E |  | L | I | P | S |  | S | I | N | K |  | S | H | I | P | S |+----------------+---+---+---+---+---+--+---+---+---+---+--+---+---+---+---+--+---+---+---+---+---+3. You are now going to put this simple message into a complex cipher.  To do this you need the Cipher Code Ring. Place the Cipher Code  Ring over the Decoder Ring and attach at the center with a paper  brad. Note that a number is visible through the window marked INDEX. 4. Cipher codes require setup configurations and today's configuration  is 3/1. Set the index number to the first number 3. If you are encrypting  LOOSE LIPS SINK SHIPS, the first cipher letter L becomes C. 5. The second number of your setup configuration, 1, tells you to  increase the number in the index window by one before encrypting  the next letter. Rotate the ring one space clockwise. Be sure that  the lines of the two rings line up. The encrypted letter above O  is now K. For the third letter, rotate again 1 space until the index  window reads 5 and the encrypted letter for O is Y. Continue to  rotate and encrypt to put this simple message into a complex cipher.+-----------------+---+---+---+---+---+--+---+---+---+---+--+---+---+---+---+--+---+---+---+---+---+| complex cypher: | C | K | Y |   |   |  |   |   |   |   |  |   |   |   |   |  |   |   |   |   |   |+-----------------+---+---+---+---+---+--+---+---+---+---+--+---+---+---+---+--+---+---+---+---+---+| actual:         | L | O | O | S | E |  | L | I | P | S |  | S | I | N | K |  | S | H | I | P | S |+-----------------+---+---+---+---+---+--+---+---+---+---+--+---+---+---+---+--+---+---+---+---+---+6. Look at your cipher. Can you use any of your earlier strategies  to decode this? Why? 7. Send a message to a friend using cipher code. Remember your partner  must know the setup configuration in order to decode your message. \newpage \vspace*{-3.5cm}\includegraphics{ring1.eps} \includegraphics{ring2.eps} \uebung{Vig\`enere\index{Vig\`enere}} Bestimmen der Schlüsselwortlänge\index{Schlüsselwortlänge}Der folgende verschlüsselte Text sei gegeben! Bestimme auf geeignetemWeg die Schlüsselwortlänge.PWTMYTBADKDGPWPFYWFGUESOTLUPNVYWAPKCSOOJWWASTLSUZUSJMJBBRSTIMGPYSXOJWWASMMZQLCHJQWGYDHKOJWWASTMFPADWIPVKLHONZWPDPWRAAGQPRKNJCNPKGPJJLTHYOWOHPGYJWCUEKUZLGAOWKHOGPESMZMRWPBKVFVZTQNLAGSFSMVWTDPWRAAGQPRKNJCNPTGTKEOMSGVLYVCHKBVKLOFOBLGNCIVXWPLYBZAAEOOWKEWEODZKZOGPWGOMSWMPWTIFFLCTUTYGUOSLZSILYOHEWEODSRVVYHSFAVVHHWGIPTGHYHCWJVLERGJWKPDHGJWTUTQNBXGZEUKTWIAZPPMOGPWGJQWGYDHKNJCNPSOVWTZPFOMNQUQFGOWPYTQNBAIVOSXNSNZNVHMSPAHCXBWVDTFJRWFLASXAGPHYHCWJVLEOANWKUPTXIYGUFFSQLLHZRKZFGPYTXIYGUOWKVAEOEAOBBCVOSXVWKUMSGVLYVCHKBOGYOSTSGGUYSTAAPKYWIPLBBRSRIKULYJUVWKUPFHMDKLMWMMFRLCGUVKQSWAGVVWYNVLZSILYROMKKJSBAZSWMOWKHMILSCKZAIRPWZHMGPYSXLWTNCIVXWPIPNOMZGUSSXIMUIPYUUEGUKICMDEOPFMZMRWPGOMYGOZSXBOKLGWKTWHYLUKVEWZDAGVEKUOSYBWPZDHKTDGUFBJEWNJSSLZSILYYUMFPAPAGVKVLWZKV \uebung{Bestimmen des Schlüsselwortes}Zur besseren Übersicht ist der Text in Blöcke eingeteilt:PWTMYTB ADKDGPW PFYWFGU ESOTLUP NVYWAPK CSOOJWW ASTLSUZ USJMJBB RSTIMGP YSXOJWW ASMMZQL CHJQWGY DHKOJWW ASTMFPA DWIPVKL HONZWPD PWRAAGQ PRKNJCN PKGPJJL THYOWOH PGYJWCU EKUZLGA OWKHOGP ESMZMRW PBKVFVZ TQNLAGS FSMVWTD PWRAAGQ PRKNJCN PTGTKEO MSGVLYV CHKBVKL OFOBLGN CIVXWPL YBZAAEO OWKEWEO DZKZOGP WGOMSWM PWTIFFL CTUTYGU OSLZSIL YOHEWEO DSRVVYH SFAVVHH WGIPTGH YHCWJVL ERGJWKP DHGJWTU TQNBXGZ EUKTWIA ZPPMOGP WGJQWGY DHKNJCN PSOVWTZ PFOMNQU QFGOWPY TQNBAIV OSXNSNZ NVHMSPA HCXBWVD TFJRWFL ASXAGPH YHCWJVL EOANWKU PTXIYGU FFSQLLH ZRKZFGP YTXIYGU OWKVAEO EAOBBCV OSXVWKU MSGVLYV CHKBOGY OSTSGGU YSTAAPK YWIPLBB RSRIKUL YJUVWKU PFHMDKL MWMMFRL CGUVKQS WAGVVWY NVLZSIL YROMKKJ SBAZSWM OWKHMIL SCKZAIR PWZHMGP YSXLWTN CIVXWPI PNOMZGU SSXIMUI PYUUEGU KICMDEO PFMZMRW PGOMYGO ZSXBOKL GWKTWHY LUKVEWZ DAGVEKU OSYBWPZ DHKTDGU FBJEWNJ SSLZSIL YYUMFPA PAGVKVL WZKV \uebung{Schlüsselwortbestimmung}Die folgende Tabelle soll ebenfalls der Ermittlung des Schlüsselwortesdienen:+------------------------+------------+------------+------------+------------+------------+------------+------------+|                        | 1. Buchst. | 2. Buchst. | 3. Buchst. | 4. BuchsT. | 5. Buchst. | 6. Buchst. | 7. Buchst. |+------------------------+------------+------------+------------+------------+------------+------------+------------+| A |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| B |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| C |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| D |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| E |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| F |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| G |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| H |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| I |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| J |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| K |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| L |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| M |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| N |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| O |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| P |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| Q |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| R |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| S |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| T |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| U |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| V |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| W |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| X |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| Y |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+| Z |            |            |            |            |            |            |            |+------------------------+------------+------------+------------+------------+------------+------------+------------+\uebung{Vigenre-Verschlüsselung}Entschlüssele folgenden Geheimtext:\fbox{\parbox{13cm}{\verbatiminput{Vigenere/Geheim.txt}}} \newpage\uebung{Feistel-Chiffre}Übung: Man verschlüssele das Originalwort nach Gl.\ref{Wort} in dreiRunden mit folgenden Schlüsseln:f_{K_{1}} & = & \left( \begin{array}{cccc}1 & 2 & 3 & 4\\2 & 3 & 4 & 1\end{array}\right) \\f_{K_{2}} & = & \left( \begin{array}{cccc}1 & 2 & 3 & 4\\3 & 4 & 1 & 2\end{array}\right) \\f_{K_{3}} & = & \left( \begin{array}{cccc}1 & 2 & 3 & 4\\1 & 4 & 2 & 3\end{array}\right) Anschließendentschlüssele man es analog zu obigen Vorgehen.\uebung{DES}Es liege folgender DES-Schlüssel vor:\begin{array}{cccccccc}0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\end{array}* Erkläre, wieso es sich um einen gültigen Schlüssel handelt.* Wende diesen Schlüssel auf den 64 Bit langen Klartext 0000...0000  an, der nur aus Nullen besteht. * Betrachte den verschlüsselten Text und erkläre, ob es sich beim vorliegenden  ``einfachen'' Schlüssel um einen guten oder schlechten handelt. 11 Darstellung und Zählung der Bits und BytesIn Kap.\ref{Kap-DES} und \ref{Kap-RSA} wurde bereits kurz auf die Darstellungeiner Bitkette bzw. eines Bytes hingewiesen. Grundsätzlich wird eineBinärzahl genauso dargestellt wie jede Dezimalzahl, d.h. von rechtsnach links aber geschrieben und gelesen von links nach rechts:\begin{array}{rcl}123_{10} & = & 1\cdot 10^{2}+2\cdot 10^{1}+3\cdot 10^{0}\\7B_{16} & = & 7\cdot 16^{1}+11\cdot 16^{0}\\01111011_{2} & = & 0\cdot 2^{7}+1\cdot 2^{6}+1\cdot 2^{5}+1\cdot 2^{4}+1\cdot 2^{3}+0\cdot 2^{2}+1\cdot 2^{1}+1\cdot 2^{0}\end{array}Die Zahlen können demnach formal durch eine Folge von Ziffern dargestelltwerden, z.B. für eine n-stellige Zahl: p_{n-1},p_{n-2},...,p_{i},...,p_{3},p_{2},p_{1},p_{0} bzw. in der verkürztenFormp_{n-1}p_{n-2}...p_{i}...p_{3}p_{2}p_{1}p_{0}Die erste von rechts gelesene Stelle einer jeden Ziffernfolge einesbeliebigen Zahlensystems gibt immer die Anzahl der Einer an und hatin der Regel die Platznummer Null! Besonders große Zahlen im Zweiersystemwerden häufig als Zahlen im Hexadezimalsystem (Hexzahlen) oder alsBitfolge in Matrixform geschrieben (vgl. Gl.\ref{DES-Key}). Schreibtman obige Binärzahl in Matrixform, so ist analog zur von links nachrechts gelesenen Bitfolge auf eine zusätzlich von unten nach obenzu lesende Matrix zu achten:p_{n-1},p_{n-2},...,p_{i},...,p_{3},p_{2},p_{1},p_{0}=\left( \begin{array}{cccc}p_{n-1} & p_{n-2} & p_{n-3} & p_{n-4}\\... & p_{i} & ... & \\p_{3} & p_{2} & p_{1} & p_{0}\end{array}\right) 01111011=\left( \begin{array}{cccc}0 & 1 & 1 & 1\\1 & 0 & 1 & 1\end{array}\right) =7B_{16}Welche Auswirkung dies auf die Darstellung unter Java hat wird in Kap.\ref{Kap-BigInt}gezeigt. Bei der verbreiteten Darstellung in Hexadezimalform ist dasArbeiten mit den sogeannten Nibbles\index{Nibble} sehr hilfreich.Ein Byte setzt sich aus zwei Nibbles zusammen, dem höherwertigen unddem niederwertigen Nibble. In Gl.\ref{Nibble} ist 7 als Hexadezimalziffergleich dem höherwertigen Nibble 0111 und B als Hexadezimalziffer gleichdem niederwertigen Nibble 1011. Damit kann ein 64 Bit langer DES-Schlüsselrelativ schnell in Hexadezimalform übertragen werden:\left( \begin{array}{cccccccc}1 & 0 & 1 & 0 & 1 & 0 & 1 & 1\\1 & 1 & 0 & 0 & 1 & 1 & 0 & 1\\0 & 0 & 1 & 1 & 0 & 0 & 1 & 0\\1 & 0 & 0 & 0 & 1 & 1 & 1 & 1\\0 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\end{array}\right) =\left( \begin{array}{c}AB\\CD\\32\\8F\\7F\\01\\40\\FE\end{array}\right) =ABCD328F7F0140FE_{16}12 Programmbibliotheken12.1 \label{Kap-BigInt}Die Klasse BigIntegerJava bietet ab Version 1.1 des JDK die Klasse  an, die neben der Möglichkeitmit extrem großen Integerzahlen\index{Integerzahlen} zu arbeiten insbesondereden Umgang mit Zahlen des Zweiersystems\index{Zweiersystem} anbietet.Tab.\ref{BigIntTable} führt die möglichen Konstruktoren  auf.\begin{sloppypar}([tab] Parameter                                | Erklärung                                                                                                                     |+------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+| byte[] val                               | Translates a byte array containing the two's-complement binary representationof a BigInteger into a BigInteger.              |+------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+| int signum, byte[] magnitude             | Translates the sign-magnitude representation of the BigInteger intoa BigInteger.                                             |+------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+| int bitLength, int certainty, Random rnd | Constructs a randomly generated positive BigInteger that is probablyprime, with the specified bitLength.                     |+------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+| int numBits, Random rnd                  | Constructs a randomly generated BigInteger, uniformly distributed overthe range \left( 0...2^{numBits}-1\right) , inclusive. |+------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+| String val                               | Translates the decimal String representation of a BigInteger into aBigInteger.                                               |+------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+| String val, int radix                    | Translates the String representation of a BigInteger in the specifiedradix into a BigInteger.                                |+------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+\label{BigIntTable}Konstruktoren der Klasse java.math.BigInteger)  \end{sloppypar}Aufruf des Konstruktors mit ``'' führt zur internen binären Darstellung``1011_{2}'' bzw. dezimalen Darstellung ``11_{10}'' , d.h. es sindeinige wichtige Dinge zu beachten:1. Die Zeichenkette ``11'' als Parameter entspricht der Zahl 11_{10}  im Zehnersystem\index{Zehnersystem}!2. Die allgemeine binäre Darstellung ist von Links nach Rechts mit den  Zweierpotenzen\index{Zweierpotenzen} 2^{n-1},2^{n-2},...,2^{2},2^{1},2^{0}  zu lesen, womit 1011_{2} die allgemeine Darstellung der Dezimalzahl\index{Dezimalzahl}  11_{10} im Zweiersystem ist, was von Links nach Rechts gelesen 1\cdot 2^{3}+0\cdot 2^{2}+1\cdot 2^{1}+1\cdot 2^{0}=11_{10}  entspricht.3. Soll die Zeichenkette ``11'' einer Zahl im Zweiersystem entsprechen,  so ist der letzte Konstruktor aus Tab.\ref{BigIntTable} anzuwenden:  ``''Ein Problem besteht jetzt in der internen Darstellung unter Java undder allgemeinen binären Darstellung. Konstruiert man eine Binärzahlüber ``'' und gibt sie anschließend zum einen über  und zum anderenmit Hilfe der Methode  (Alg.), so ergibt sich\LiesText{BigIntAusgeben.txt}\lst{BigIntAusgeben.java}{Ausgabe einer BigInter-Zahl}Mit  wird also in jedem Fall die Dezimalzahl ausgegeben, selbst wennder Konstruktor eine Definition als Binärzahl vorsah. Werden die einzelnenBits von links nach rechts abgefragt und auch so ausgegeben, ergibtsich die umgekehrte Reihenfolge. Der Alg. ist also dahingehend zuändern, dass die Ausgabe von rechts nach links erfolgt. Die möglichenAusgabemethoden zeigt Alg., während Tab.\ref{BigIntAusgeben} einekurze Beschreibung gibt. Weiterhin ist noch zu beachten, dass dieMethode  nicht prüft, ob es sich um sinnvolle Stellen handelt odernicht. Dies erkennt man an der Ausgabe, bei die 8 Bit lange Binärzahlmit 10 Stellen (1000111100) ausgegeben wurde. Nur bei einer Ausgabevon rechts nach links erhält man dann die korrekte Ausgabe, denn alleüber acht hinausgehenden Stellen sind führende Nullen, wärend es beider Links-Rechts-Ausgabe zu einer falschen Binärzahl kommt, da dieNullen für eine Verschiebung der anderen Stellen sorgen.\lst{BigIntAusgeben2.java}{Ausgabemethoden für eine BigInter-Zahl}([tab] Parameter                  | Beschreibung                                                                                          |+----------------------------+-------------------------------------------------------------------------------------------------------+| BigInteger B, int m, int n | Die BigIntegerzahl B wird in Binärform als Matrixform mit m Zeilenund n Spalten ausgegeben           |+----------------------------+-------------------------------------------------------------------------------------------------------+| BigInteger B, int n        | Die BigIntegerzahl B wird mit n Stellen ausgegeben (2^{n},2^{n-1},...,2^{2},2^{1},2^{0}) |+----------------------------+-------------------------------------------------------------------------------------------------------+| BigInteger B               | Die BigIntegerzahl B wird komplett ausgegeben (2^{numBits},2^{numBits-1},...,2^{2},2^{1},2^{0})       |+----------------------------+-------------------------------------------------------------------------------------------------------+\label{BigIntAusgeben}Ausgabemethode public void BigIntAusgeben()) 12.2 MethodensammlungDie weiteren, nicht direkt mit dem Thema Kryptologie zusammenhängendenAlgorithmen werden im folgenden kommentarlos angegeben.numBits\lst{Eingabe.java}{Methodensammlung zur Ein-/Ausgabe}\lst{Datei.java}{Methodensammlung zur Dateienein- und ausgabe}\lst{DES.java}{Methodensammlung zum DES-Verfahren}\newpage\addtocontents{section}{Literatur}\addcontentsline{toc}{section}{Literatur} \bibliographystyle{plain}\bibliography{/home/voss/texte/Literaturdatenbank}\printindex{}R